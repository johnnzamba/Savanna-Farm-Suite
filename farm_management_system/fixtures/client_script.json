[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Poultry Batches",
  "enabled": 1,
  "modified": "2025-09-23 14:32:02.127993",
  "module": "Savanna Farm Suite",
  "name": "Collections for Poultry Batch",
  "script": "// farm_management_system/public/js/poultry_batches_listview.js\nfrappe.listview_settings['Poultry Batches'] = {\n    refresh: function(list_view) {\n        // Add both actions under one grouped menu \"Actions\"\n        // Use the third parameter (group) to place them together\n        // Make Collection\n        list_view.page.add_inner_button(__('Make Collection'), () => {\n            const dialog = new frappe.ui.Dialog({\n                title: __('Make Collection'),\n                fields: [\n                    { fieldtype: 'Date', fieldname: 'date_of_collection', label: __('Date of Collection'), default: frappe.datetime.get_today(), reqd: 1 },\n                    { fieldtype: 'Link', fieldname: 'animal', label: __('Specify Animal'), options: 'Animals', default: \"Chicken\", reqd: 1 },\n                    {\n                        fieldtype: 'Table',\n                        fieldname: 'production_table',\n                        label: __('Collections Table'),\n                        fields: [\n                            { fieldtype: 'Link', fieldname: 'poultry_batch', label: __('Poultry Batch'), options: 'Poultry Batches', in_list_view: 1 },\n                            { fieldtype: 'Link', fieldname: 'animal_product', label: __('Animal Product'), options: 'Animal Products', reqd: 1, in_list_view: 1 },\n                            { fieldtype: 'Data', fieldname: 'default_uom', label: __('Default UOM'), read_only: 1, in_list_view: 1 },\n                            { fieldtype: 'Float', fieldname: 'quantity_collected', label: __('Quantity Collected'), reqd: 1, in_list_view: 1 }\n                        ]\n                    }\n                ],\n                primary_action_label: __('Make Entry'),\n                primary_action: function() {\n                    const dvalues = dialog.get_values(true);\n                    const today = frappe.datetime.get_today();\n                    const selected_date = dvalues && dvalues.date_of_collection;\n                    if (selected_date && selected_date > today) {\n                        frappe.show_alert({ message: __('Date of Collection cannot be a future date.'), indicator: 'red' }, 5);\n                        return;\n                    }\n\n                    const rows = dvalues.production_table || [];\n                    if (!rows.length) {\n                        frappe.show_alert({ message: __('No products found to collect.'), indicator: 'orange' }, 5);\n                        return;\n                    }\n\n                    frappe.warn(\n                        __('Are you sure you want to proceed?'),\n                        __('Please Note this Action is Irreversible'),\n                        () => {\n                            frappe.dom.freeze(__('Creating collection...'));\n                            frappe.call({\n                                method: 'farm_management_system.savanna_farm_suite.doctype.poultry_batches.poultry_batches.create_collection_entry',\n                                args: {\n                                    date_of_collection: dvalues.date_of_collection,\n                                    rows: rows\n                                },\n                                callback: function(r) {\n                                    frappe.dom.unfreeze();\n                                    if (!r.exc && r.message) {\n                                        frappe.utils.play_sound('success');\n                                        dialog.hide();\n                                        list_view.refresh();\n                                        frappe.show_alert({ message: __('Collection recorded'), indicator: 'green' });\n                                    } else if (r.exc) {\n                                        frappe.show_alert({ message: __('Error: ') + (r.exc || __('Unknown error occurred')), indicator: 'red' }, 10);\n                                    }\n                                },\n                                error: function() {\n                                    frappe.dom.unfreeze();\n                                    frappe.show_alert({ message: __('Network Error: Please try again.'), indicator: 'red' }, 10);\n                                }\n                            });\n                        },\n                        'Continue',\n                        true\n                    );\n                }\n            });\n\n            dialog.show();\n            dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n\n            // ---------- Helpers ----------\n            function get_tbl() {\n                return dialog.fields_dict && dialog.fields_dict.production_table;\n            }\n\n            // Ensure animal_product choices are filtered by product_tied_to_which_animal\n            function set_product_query_for_animal(animal_name) {\n                const tbl = get_tbl();\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n\n                const get_query_fn = function() {\n                    if (!animal_name) return { filters: {} };\n                    return { filters: { product_tied_to_which_animal: animal_name } };\n                };\n\n                // Top-level grid field (if supported)\n                try {\n                    if (typeof grid.get_field === 'function') {\n                        const topField = grid.get_field('animal_product');\n                        if (topField) {\n                            topField.get_query = get_query_fn;\n                            if (topField.df) topField.df.get_query = get_query_fn;\n                        }\n                    }\n                } catch (e) { console.warn('set_product_query_for_animal: top-level set failed', e); }\n\n                // Per-row fields (reliable)\n                try {\n                    (grid.grid_rows || []).forEach(function(gr) {\n                        try {\n                            const f = gr.fields_map && gr.fields_map.animal_product;\n                            if (f) {\n                                f.get_query = get_query_fn;\n                                if (f.df) f.df.get_query = get_query_fn;\n\n                                // Clear stale product if animal changed\n                                if (gr.doc && gr.doc.animal_product) {\n                                    gr.doc.animal_product = '';\n                                    if (gr.refresh_field) gr.refresh_field('animal_product');\n                                }\n                            }\n                        } catch (inner) { /* ignore per-row errors */ }\n                    });\n                } catch (e) { console.warn('set_product_query_for_animal: per-row set failed', e); }\n\n                try { grid.refresh(); } catch (e) {}\n            }\n\n            // Set query for poultry_batch (only show Active)\n            function set_batch_query() {\n                const tbl = get_tbl();\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n\n                const get_query_fn = function() {\n                    return { filters: { batch_status: \"Active\" } };\n                };\n\n                try {\n                    if (typeof grid.get_field === 'function') {\n                        const topField = grid.get_field('poultry_batch');\n                        if (topField) {\n                            topField.get_query = get_query_fn;\n                            if (topField.df) topField.df.get_query = get_query_fn;\n                        }\n                    }\n                } catch (e) { console.warn('set_batch_query top set failed', e); }\n\n                try {\n                    (grid.grid_rows || []).forEach(function(gr) {\n                        try {\n                            const f = gr.fields_map && gr.fields_map.poultry_batch;\n                            if (f) {\n                                f.get_query = get_query_fn;\n                                if (f.df) f.df.get_query = get_query_fn;\n                            }\n                        } catch (inner) { /* ignore per-row errors */ }\n                    });\n                } catch (e) { console.warn('set_batch_query per-row set failed', e); }\n\n                try { grid.refresh(); } catch (e) {}\n            }\n\n            function clear_production_table() {\n                const tbl = get_tbl();\n                if (!tbl) return;\n                tbl.df.data = [];\n                if (tbl.grid) tbl.grid.refresh();\n            }\n\n            // auto-add one row per active poultry batch (poultry_batches is array of {name})\n            function populate_rows_for_batches(batches) {\n                const tbl = get_tbl();\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n\n                tbl.df.data = [];\n                grid.refresh();\n\n                const rows = batches.map(b => ({\n                    poultry_batch: b.name,\n                    animal_product: '',\n                    default_uom: '',\n                    quantity_collected: 0.0\n                }));\n\n                tbl.df.data = rows;\n                grid.refresh();\n\n                // Lock poultry_batch per row and hide add/remove controls\n                try {\n                    (grid.grid_rows || []).forEach(function(gr) {\n                        try {\n                            if (gr.fields_map && gr.fields_map.poultry_batch) {\n                                // mark read-only in df and set input readonly where available\n                                gr.fields_map.poultry_batch.df && (gr.fields_map.poultry_batch.df.read_only = 1);\n                                try { gr.fields_map.poultry_batch.$input && gr.fields_map.poultry_batch.$input.prop('readonly', true); } catch (e) {}\n                            }\n\n                            // hide remove button for this row\n                            gr.toggle_remove_button && gr.toggle_remove_button(false);\n                        } catch (inner) { /* ignore */ }\n                    });\n\n                    // hide global add-row controls so user cannot add rows\n                    dialog.$wrapper.find('.grid-add-row, .grid-add-rows, .grid-row-add').hide();\n                } catch (e) {\n                    console.warn('populate_rows_for_batches: could not lock rows', e);\n                }\n\n                // Ensure product queries are set per-row now that rows exist\n                set_product_query_for_animal(dialog.get_value('animal'));\n                set_batch_query();\n            }\n\n            // Build rows for animal products (non-poultry)\n            function populate_rows_for_products(products) {\n                const tbl = get_tbl();\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n\n                tbl.df.data = [];\n                grid.refresh();\n\n                const rows = products.map(p => ({\n                    poultry_batch: '',\n                    animal_product: p.name,\n                    default_uom: p.default_unit_of_measure || '',\n                    quantity_collected: 0.0\n                }));\n\n                tbl.df.data = rows;\n                grid.refresh();\n\n                // In product-mode, allow add/remove rows\n                try {\n                    dialog.$wrapper.find('.grid-add-row, .grid-add-rows, .grid-row-add').show();\n                    (grid.grid_rows || []).forEach(function(gr) {\n                        try {\n                            // ensure poultry_batch field is editable/blank\n                            if (gr.fields_map && gr.fields_map.poultry_batch) {\n                                gr.fields_map.poultry_batch.df && (gr.fields_map.poultry_batch.df.read_only = 0);\n                                try { gr.fields_map.poultry_batch.$input && gr.fields_map.poultry_batch.$input.prop('readonly', false); } catch (e) {}\n                                gr.toggle_remove_button && gr.toggle_remove_button(true);\n                            }\n                        } catch (inner) { /* ignore */ }\n                    });\n                } catch (e) {\n                    console.warn('populate_rows_for_products: could not re-enable add/remove', e);\n                }\n\n                set_product_query_for_animal(dialog.get_value('animal'));\n                set_batch_query();\n            }\n\n            // ---------- Events ----------\n\n            // Initialize queries\n            set_product_query_for_animal(null);\n            set_batch_query();\n\n            // When animal changes\n            dialog.$wrapper.on('change', 'input[data-fieldname=\"animal\"]', function() {\n                const animal = $(this).val();\n                set_product_query_for_animal(animal);\n                set_batch_query();\n\n                const is_poultry = ['Chicken', 'Poultry', 'Birds'].includes(animal);\n\n                // Clear existing rows while fetching new ones\n                clear_production_table();\n\n                if (!animal) return;\n\n                if (is_poultry) {\n                    // fetch all active Poultry Batches and populate rows\n                    frappe.call({\n                        method: 'frappe.client.get_list',\n                        args: {\n                            doctype: 'Poultry Batches',\n                            filters: { batch_status: 'Active' },\n                            fields: ['name'],\n                            limit_page_length: 2000\n                        },\n                        callback: function(r) {\n                            if (!r.message || !r.message.length) {\n                                clear_production_table();\n                                frappe.show_alert({ message: __('No active Poultry Batches found'), indicator: 'orange' });\n                                return;\n                            }\n                            populate_rows_for_batches(r.message);\n                        },\n                        error: function() {\n                            frappe.show_alert({ message: __('Failed to fetch Poultry Batches'), indicator: 'red' });\n                        }\n                    });\n                } else {\n                    // non-poultry: fetch Animal Products for this animal and populate rows\n                    frappe.call({\n                        method: 'frappe.client.get_list',\n                        args: {\n                            doctype: 'Animal Products',\n                            filters: { product_tied_to_which_animal: animal },\n                            fields: ['name', 'default_unit_of_measure'],\n                            limit_page_length: 1000\n                        },\n                        callback: function(r) {\n                            if (!r.message || !r.message.length) {\n                                clear_production_table();\n                                frappe.show_alert({ message: __('No products found for selected animal'), indicator: 'orange' });\n                                return;\n                            }\n                            populate_rows_for_products(r.message);\n                        },\n                        error: function() {\n                            frappe.show_alert({ message: __('Failed to fetch Animal Products'), indicator: 'red' });\n                        }\n                    });\n                }\n            });\n\n            // Auto-fill default_uom when product selected (awesomplete)\n            dialog.$wrapper.on('awesomplete-selectcomplete', 'input[data-fieldname=\"animal_product\"]', function() {\n                const $input = $(this);\n                const val = $input.val();\n                const $row = $input.closest('.grid-row');\n                const rowName = $row.attr('data-name');\n                const tbl = get_tbl();\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: { doctype: 'Animal Products', filters: { name: val }, fieldname: 'default_unit_of_measure' },\n                    callback: function(r) {\n                        const uom = (r && r.message && r.message.default_unit_of_measure) || '';\n                        try {\n                            if (grid.grid_rows && grid.grid_rows.length) {\n                                const gr = grid.grid_rows.find(function(rr) { return rr && rr.wrapper && rr.wrapper.attr && rr.wrapper.attr('data-name') === rowName; }) || grid.grid_rows[0];\n                                if (gr && gr.doc) {\n                                    gr.doc.default_uom = uom;\n                                    if (gr.refresh_field) gr.refresh_field('default_uom');\n                                } else {\n                                    grid.refresh();\n                                }\n                            } else {\n                                grid.refresh();\n                            }\n                        } catch (e) { console.warn('set default_uom failed', e); }\n                    }\n                });\n            });\n\n            // When user adds a row manually later, ensure queries are applied to new row\n            dialog.$wrapper.on('click', '.grid-add-row, .grid-add-rows, .grid-row-add', function() {\n                setTimeout(function() {\n                    const animal_val = dialog.get_value('animal');\n                    set_product_query_for_animal(animal_val);\n                    set_batch_query();\n                }, 50);\n            });\n\n            // Prevent future date on blur\n            dialog.$wrapper.on('blur', 'input[data-fieldname=\"date_of_collection\"]', function() {\n                const $input = $(this);\n                const val = $input.val();\n                if (!val) return;\n                const today = frappe.datetime.get_today();\n                if (val > today) {\n                    frappe.show_alert({ message: __('Date of Collection cannot be a future date. The value has been reset to today.'), indicator: 'orange' }, 5);\n                    dialog.set_value('date_of_collection', today);\n                    $input.val(today);\n                    try { $input.blur(); } catch (e) {}\n                }\n            });\n\n            // initialize based on initial animal value\n            const initial_animal = dialog.get_value('animal');\n            if (['Chicken', 'Poultry', 'Birds'].includes(initial_animal)) {\n                // populate poultry batches on load if default is poultry\n                frappe.timeout(0).then(function() {\n                    // small delay so dialog renders before we mutate grid\n                    dialog.$wrapper.find('input[data-fieldname=\"animal\"]').trigger('change');\n                });\n            } else if (initial_animal) {\n                dialog.$wrapper.find('input[data-fieldname=\"animal\"]').trigger('change');\n            }\n\n        }, __('Actions')).addClass('btn-primary');\n\n        // Cull Animals (under same Actions group)\n        list_view.page.add_inner_button(__('Cull Animals'), () => {\n            // If one row selected in listview, pre-fill that batch\n            const checked = list_view.get_checked_items();\n            const default_batch = (Array.isArray(checked) && checked.length === 1) ? checked[0] : '';\n\n            const cull_dialog = new frappe.ui.Dialog({\n                title: __('Cull Animals'),\n                fields: [\n                    { fieldtype: 'Link', fieldname: 'poultry_batch', label: __('Specify Poultry Batch'), options: 'Poultry Batches', reqd: 1, default: default_batch },\n                    { fieldtype: 'Int', fieldname: 'current_count', label: __('Current Poultry Count'), read_only: 1, description: __('Autopopulated')},\n                    { fieldtype: 'Int', fieldname: 'count', label: __('Number of chickens to cull'), reqd: 1, description: __('Enter a positive whole number (no decimals)'), placeholder: __('e.g. 2, 30') }\n                ],\n                primary_action_label: __('Cull'),\n                primary_action: function(values) {\n                    const batch = values.poultry_batch;\n                    const count = parseInt(values.count, 10);\n                    const current = parseInt(values.current_count || 0, 10);\n        \n                    if (!batch) {\n                        frappe.show_alert({ message: __('Please specify a Poultry Batch.'), indicator: 'red' }, 6);\n                        return;\n                    }\n                    if (isNaN(count) || count <= 0) {\n                        frappe.show_alert({ message: __('Please enter a positive whole number for the count.'), indicator: 'red' }, 6);\n                        return;\n                    }\n                    if (isNaN(current) || current < 0) {\n                        frappe.show_alert({ message: __('Current Poultry Count is unavailable. Please check the selected batch.'), indicator: 'red' }, 8);\n                        return;\n                    }\n                    if (count > current) {\n                        frappe.show_alert({ message: __('Cull count ({0}) exceeds current poultry count ({1}).', [count, current]), indicator: 'red' }, 8);\n                        return;\n                    }\n        \n                    cull_dialog.hide();\n        \n                    // irreversible confirmation\n                    frappe.confirm(\n                        __('This Action is irreversible! Do you want to continue?'),\n                        () => {\n                            // freeze UI\n                            frappe.dom.freeze(__('Applying cull...'));\n        \n                            frappe.call({\n                                method: 'farm_management_system.savanna_farm_suite.doctype.poultry_batches.poultry_batches.cull_poultry_batch',\n                                args: {\n                                    batch_name: batch,\n                                    cull_count: count\n                                },\n                                callback: function(r) {\n                                    frappe.dom.unfreeze();\n                                    if (r.message && r.message.success) {\n                                        frappe.utils.play_sound('success');\n                                        frappe.show_alert({\n                                            message: __(\n                                                'Cull applied. Batch: {0}. New mortality_count: {1}, mortality_rate: {2}%',\n                                                [batch, r.message.mortality_count, (r.message.mortality_rate || 0).toFixed(3)]\n                                            ),\n                                            indicator: 'green'\n                                        }, 8);\n                                        list_view.refresh();\n                                    } else {\n                                        const err = (r.message && r.message.error) || (r.exc ? r.exc : __('Unknown error'));\n                                        frappe.show_alert({\n                                            message: __('Error: {0}', [err]),\n                                            indicator: 'red'\n                                        }, 10);\n                                    }\n                                },\n                                error: function() {\n                                    frappe.dom.unfreeze();\n                                    frappe.show_alert({\n                                        message: __('Failed to call server'),\n                                        indicator: 'red'\n                                    }, 10);\n                                }\n                            });\n                        },\n                        () => {\n                            // cancelled - no-op\n                        }\n                    );\n                }\n            });\n            // helper: fetch total_animals & mortality_count and set current_count\n            function fetchAndSetCurrentCount(batch_name) {\n                if (!batch_name) {\n                    cull_dialog.set_value('current_count', '');\n                    return;\n                }\n        \n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Poultry Batches',\n                        filters: { name: batch_name },\n                        fieldname: ['total_animals', 'mortality_count']\n                    },\n                    callback: function(r) {\n                        if (!r || !r.message) {\n                            cull_dialog.set_value('current_count', '');\n                            frappe.show_alert({ message: __('Unable to fetch batch data.'), indicator: 'red' }, 6);\n                            return;\n                        }\n                        const total = parseFloat(r.message.total_animals || 0);\n                        const mort = parseFloat(r.message.mortality_count || 0);\n                        let current = Math.max(0, Math.round(total - mort));\n                        // if total/mort not set or invalid, show 0 and warn\n                        if (isNaN(current)) current = 0;\n                        cull_dialog.set_value('current_count', current);\n                    },\n                    error: function() {\n                        cull_dialog.set_value('current_count', '');\n                        frappe.show_alert({ message: __('Network error fetching batch data.'), indicator: 'red' }, 8);\n                    }\n                });\n            }\n\n            cull_dialog.show();\n            cull_dialog.$wrapper.find('.modal-dialog').addClass('modal-md');\n            if (default_batch) {\n                fetchAndSetCurrentCount(default_batch);\n            }\n        \n            // Listen to Link field changes (both typing/select and awesomplete event)\n            cull_dialog.$wrapper.on('change', 'input[data-fieldname=\"poultry_batch\"]', function() {\n                const batch = $(this).val();\n                fetchAndSetCurrentCount(batch);\n            });\n            cull_dialog.$wrapper.on('awesomplete-selectcomplete', 'input[data-fieldname=\"poultry_batch\"]', function() {\n                const batch = $(this).val();\n                fetchAndSetCurrentCount(batch);\n            });\n\n        }, __('Actions')); // put under Actions group\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Poultry Batches",
  "enabled": 1,
  "modified": "2025-09-04 20:35:55.305963",
  "module": "Savanna Farm Suite",
  "name": "Poultry Batch",
  "script": "frappe.ui.form.on('Poultry Batches', {\n    refresh(frm) {\n        // This function is called when the form is refreshed.\n\n        // Clear the existing chart container to prevent duplicates on reload\n        frm.fields_dict.profitability_analysis_for_this_batch.$wrapper.html(\"\");\n\n        // Add containers for the charts\n        frm.fields_dict.profitability_analysis_for_this_batch.$wrapper.html(`\n            <div class=\"frappe-card p-4\">\n                <h4 class=\"mb-4\">Weekly Feed Expense Analysis</h4>\n                <div id=\"feed-expense-chart-container\"></div>\n            </div>\n            <div class=\"frappe-card p-4 mt-4\">\n                <h4 class=\"mb-4\">Weekly Animal Product Stock Value</h4>\n                <div id=\"stock-value-chart-container\"></div>\n            </div>\n        `);\n\n        // Add a loading indicator\n        const expenseChartContainer = document.getElementById('feed-expense-chart-container');\n        const stockChartContainer = document.getElementById('stock-value-chart-container');\n        expenseChartContainer.innerText = 'Loading Expense Data...';\n        stockChartContainer.innerText = 'Loading Stock Value Data...';\n\n        // Call the server-side function to get processed chart data\n        frappe.call({\n            method: \"farm_management_system.savanna_farm_suite.doctype.poultry_batches.poultry_batches.get_profitability_chart_data\",\n            args: {\n                batch_name: frm.doc.name\n            },\n            callback: function(response) {\n                if (response.message) {\n                    const expenseData = response.message.expense_data;\n                    const stockData = response.message.stock_data;\n\n                    // --- Render Expense Chart ---\n                    if (expenseData && expenseData.labels && expenseData.labels.length > 0) {\n                        const expenseChart = new frappe.Chart(\"#feed-expense-chart-container\", {\n                            title: \"Weekly Feed Costs per Feed Type\",\n                            data: expenseData,\n                            type: 'line',\n                            height: 300,\n                            colors: ['#743ee2', '#ff5858', '#00a8ff', '#ffc312', '#2bcbba'],\n                            lineOptions: {\n                                regionFill: 1\n                            }\n                        });\n                    } else {\n                        expenseChartContainer.innerHTML = '<p class=\"text-muted\">No nourishment log data found for this batch to generate expense chart.</p>';\n                    }\n\n                    // --- Render Stock Value Chart ---\n                    if (stockData && stockData.labels && stockData.labels.length > 0) {\n                       const stockValueChart = new frappe.Chart(\"#stock-value-chart-container\", {\n                            title: \"Weekly Stock Value per Animal Product\",\n                            data: stockData,\n                            type: 'line',\n                            height: 300,\n                            colors: ['#ff6b6b', '#feca57', '#48dbfb', '#1dd1a1', '#5f27cd'],\n                             lineOptions: {\n                                regionFill: 0\n                            }\n                        });\n                    } else {\n                         stockChartContainer.innerHTML = '<p class=\"text-muted\">No stock ledger entries found for this batch to generate stock value chart.</p>';\n                    }\n\n                } else {\n                     expenseChartContainer.innerText = 'Failed to load chart data.';\n                     stockChartContainer.innerText = 'Failed to load chart data.';\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Crop Intake",
  "enabled": 1,
  "modified": "2025-09-19 07:09:52.180306",
  "module": "Savanna Farm Suite",
  "name": "Calendar HTML",
  "script": "frappe.ui.form.on(\"Crop Intake\", {\n    refresh(frm) {\n        \n        // Render calendar if the document is saved\n        if (frm.doc.name) {\n            generate_schedule_calendar(frm);\n        }\n    },\n});\n\nfunction generate_schedule_calendar(frm) {\n\tconst wrapper_field = frm.get_field('schedule_calendar');\n\tif (!wrapper_field) return;\n\n\tconst $wrap = wrapper_field.$wrapper;\n\t$wrap.empty();\n\n\tconst rows = (frm.doc.table_biyv || []).filter(r => r.scheduled_date);\n\tif (!rows.length) {\n\t\t$wrap.html('<div class=\"text-muted\">No scheduled activities found to visualize.</div>');\n\t\treturn;\n\t}\n\n\t// HTML escape + newline -> <br>\n\tconst esc = (s) => {\n\t\tif (s === null || s === undefined) return '';\n\t\treturn String(s)\n\t\t\t.replace(/&/g, \"&amp;\")\n\t\t\t.replace(/</g, \"&lt;\")\n\t\t\t.replace(/>/g, \"&gt;\")\n\t\t\t.replace(/\"/g, \"&quot;\")\n\t\t\t.replace(/'/g, \"&#039;\")\n\t\t\t.replace(/\\n/g, \"<br>\");\n\t};\n\n\t// group rows by YYYY-MM-DD\n\tconst groupByDate = {};\n\trows.forEach((r) => {\n\t\tif (!r.scheduled_date) return;\n\t\tlet raw = r.scheduled_date;\n\t\tlet key = String(raw).substr(0, 10); // Assumes YYYY-MM-DD format\n\t\tif (!groupByDate[key]) groupByDate[key] = [];\n\t\tgroupByDate[key].push({\n\t\t\tactivity: r.activity_being_undertaken || '',\n\t\t\tstaff: r.staff_name || '',\n\t\t\trow: r\n\t\t});\n\t});\n\n\t// deterministic \"random\" color per date\n\tfunction hashString(s) {\n\t\tlet h = 2166136261 >>> 0;\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\th ^= s.charCodeAt(i);\n\t\t\th += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);\n\t\t}\n\t\treturn (h >>> 0);\n\t}\n\tfunction colorForKey(key) {\n\t\tconst h = hashString(key) % 360;\n\t\tconst light = 75 - (hashString(key + 'L') % 15);\n\t\tconst sat = 65 + (hashString(key + 'S') % 20);\n\t\treturn `hsl(${h}, ${sat}%, ${light}%)`;\n\t}\n\n\t// container id\n\tconst id = `farm-schedule-calendar-${(Math.random()*1e9|0)}`;\n\n\tconst calendarHTML = `\n\t\t<style>\n\t\t#${id} { font-family: system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial; max-width: 700px; }\n\t\t#${id} .cal-header { display:flex; align-items:center; justify-content:space-between; margin-bottom:8px; }\n\t\t#${id} .cal-nav { cursor:pointer; padding:6px 10px; border-radius:6px; user-select:none; background: #eee; }\n        #${id} .cal-nav:hover { background: #ddd; }\n\t\t#${id} .cal-month { font-weight:600; font-size:1.05rem; }\n\t\t#${id} .cal-grid { display:grid; grid-template-columns:repeat(7,1fr); gap:6px; }\n\t\t#${id} .weekday { text-align:center; font-size:0.8rem; color:#666; padding:6px 0; }\n\t\t#${id} .day { min-height:70px; border-radius:8px; padding:6px; position:relative; background: #f7f7f7; outline: none; }\n\t\t#${id} .day.outside { opacity:0.25; background:transparent; }\n\t\t#${id} .day .date-num { font-weight:600; font-size:0.95rem; display:block; margin-bottom:6px; }\n\t\t#${id} .has-activities { cursor:pointer; box-shadow: inset 0 0 0 2px rgba(0,0,0,0.03); color: #fff; }\n        #${id} .has-activities .date-num { color: #fff; text-shadow: 0 1px 2px rgba(0,0,0,0.2); }\n\t\t#${id} .cal-footer { margin-top:10px; color:#666; font-size:0.85rem; }\n\t\t</style>\n\n\t\t<div id=\"${id}\">\n\t\t\t<div class=\"cal-header\">\n\t\t\t\t<div>\n\t\t\t\t\t<span class=\"cal-nav\" id=\"${id}-prev\" title=\"Previous month\">&#9664;</span>\n\t\t\t\t\t<span class=\"cal-nav\" id=\"${id}-next\" style=\"margin-left:8px;\" title=\"Next month\">&#9654;</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"cal-month\" id=\"${id}-month\"></div>\n\t\t\t\t<div style=\"width:80px\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"cal-grid\" id=\"${id}-weekdays\">\n\t\t\t\t<div class=\"weekday\">Sun</div><div class=\"weekday\">Mon</div><div class=\"weekday\">Tue</div><div class=\"weekday\">Wed</div><div class=\"weekday\">Thu</div><div class=\"weekday\">Fri</div><div class=\"weekday\">Sat</div>\n\t\t\t</div>\n\t\t\t<div class=\"cal-grid\" id=\"${id}-days\" style=\"margin-top:8px;\"></div>\n\t\t\t<div class=\"cal-footer\">Highlighted days have scheduled farm activities. Hover for details.</div>\n\t\t</div>\n\t`;\n\n\t$wrap.append(calendarHTML);\n\n\tlet currentMonth, currentYear;\n\tconst keys = Object.keys(groupByDate);\n\tif (keys.length) {\n\t\tconst sorted = keys.slice().sort();\n\t\tconst first = new Date(sorted[0] + 'T00:00:00');\n\t\tcurrentMonth = first.getMonth();\n\t\tcurrentYear = first.getFullYear();\n\t} else {\n\t\tconst now = new Date();\n\t\tcurrentMonth = now.getMonth();\n\t\tcurrentYear = now.getFullYear();\n\t}\n\n\tconst $monthLabel = $wrap.find(`#${id}-month`);\n\tconst $days = $wrap.find(`#${id}-days`);\n\t$wrap.find(`#${id}-prev`).on('click', () => { currentMonth--; if (currentMonth < 0) { currentMonth = 11; currentYear--; } renderMonth(); });\n\t$wrap.find(`#${id}-next`).on('click', () => { currentMonth++; if (currentMonth > 11) { currentMonth = 0; currentYear++; } renderMonth(); });\n\n\tlet tooltipEl = null;\n\tfunction createTooltip() {\n\t\tif (tooltipEl) return tooltipEl;\n\t\ttooltipEl = document.createElement('div');\n\t\tObject.assign(tooltipEl.style, {\n\t\t\tposition: 'fixed', zIndex: 1061, padding: '10px 12px', borderRadius: '8px',\n\t\t\tbackground: 'rgba(255,255,255,0.98)',\n\t\t\tboxShadow: '0 10px 30px rgba(0,0,0,0.12)', border: '1px solid #ddd',\n\t\t\tmaxWidth: '320px', fontSize: '0.87rem', color: '#111',\n\t\t\tdisplay: 'none', pointerEvents: 'none'\n\t\t});\n\t\tdocument.body.appendChild(tooltipEl);\n\t\treturn tooltipEl;\n\t}\n\tfunction showTooltipFor(dateKey, x, y, activities) {\n\t\tconst el = createTooltip();\n\t\tconst parts = activities.map(a => {\n\t\t\treturn `<div style=\"margin-bottom:6px; padding-bottom:6px; border-bottom:1px solid #eee; font-size: 13px;\">\n                        <div><strong>Nature of Activity:</strong> ${esc(a.activity)}</div>\n                        <div><strong>Assigned To:</strong> ${esc(a.staff)}</div>\n                    </div>`;\n\t\t}).join('');\n\t\tel.innerHTML = parts.slice(0, -1) || '<div style=\"opacity:0.7\">No details</div>'; // remove last border\n\t\tel.style.display = 'block';\n\t\tpositionTooltip(x, y, el);\n\t}\n\tfunction hideTooltip() {\n\t\tif (tooltipEl) tooltipEl.style.display = 'none';\n\t}\n\tfunction positionTooltip(clientX, clientY, el) {\n\t\tif (!el) el = tooltipEl;\n\t\tconst pad = 12;\n\t\tconst rect = el.getBoundingClientRect();\n\t\tconst vw = window.innerWidth;\n\t\tconst vh = window.innerHeight;\n\t\tlet left = clientX + 12;\n\t\tlet top = clientY + 16;\n\t\tif (left + rect.width + pad > vw) left = clientX - rect.width - 12;\n\t\tif (top + rect.height + pad > vh) top = clientY - rect.height - 12;\n\t\tel.style.left = `${Math.max(pad, left)}px`;\n\t\tel.style.top = `${Math.max(pad, top)}px`;\n\t}\n\n\tfunction attachDayHandlers($container) {\n\t\t$container.off('.farmCal').on('mouseenter.farmCal', '.has-activities', function (ev) {\n\t\t\tconst dateKey = $(this).data('date-key');\n\t\t\tif (!dateKey || !groupByDate[dateKey]) return;\n\t\t\tshowTooltipFor(dateKey, ev.clientX, ev.clientY, groupByDate[dateKey]);\n\t\t\tconst moveHandler = (e) => positionTooltip(e.clientX, e.clientY);\n\t\t\t$(document).on('mousemove.farmCal', moveHandler);\n\t\t\t$(this).data('farmCal_moveHandler', moveHandler);\n\t\t}).on('mouseleave.farmCal', '.has-activities', function () {\n\t\t\tconst moveHandler = $(this).data('farmCal_moveHandler');\n\t\t\tif (moveHandler) $(document).off('mousemove.farmCal', moveHandler);\n\t\t\thideTooltip();\n\t\t});\n\t}\n\n\tfunction pad(n) { return String(n).padStart(2,'0'); }\n\tfunction dateKeyFromYMD(y,m,d) { return `${y}-${pad(m)}-${pad(d)}`; }\n\n\tfunction renderMonth() {\n\t\tconst monthNames = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n\t\t$monthLabel.text(`${monthNames[currentMonth]} ${currentYear}`);\n\t\t$days.empty();\n\n\t\tconst firstWeekday = new Date(currentYear, currentMonth, 1).getDay();\n\t\tconst daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n\n\t\tfor (let i = 0; i < firstWeekday; i++) $days.append(`<div class=\"day outside\"></div>`);\n\n\t\tfor (let d = 1; d <= daysInMonth; d++) {\n\t\t\tconst key = dateKeyFromYMD(currentYear, currentMonth + 1, d);\n\t\t\tconst activities = groupByDate[key] || [];\n\t\t\tconst has = !!activities.length;\n\t\t\tconst $day = $(`<div class=\"day ${has ? 'has-activities' : ''}\" data-date-key=\"${key}\"></div>`);\n\t\t\t$day.append(`<span class=\"date-num\">${d}</span>`);\n\t\t\tif (has) {\n\t\t\t\t$day.css('background', colorForKey(key));\n\t\t\t\tconst preview = esc((activities[0] && activities[0].activity) || '');\n\t\t\t\t$day.append(`<div style=\"font-size:0.78rem;opacity:0.9;max-height:40px;overflow:hidden\">${preview}</div>`);\n\t\t\t}\n\t\t\t$days.append($day);\n\t\t}\n\n\t\tconst totalCells = firstWeekday + daysInMonth;\n\t\tconst trailing = (7 - (totalCells % 7)) % 7;\n\t\tfor (let i = 0; i < trailing; i++) $days.append(`<div class=\"day outside\"></div>`);\n\t\t\n\t\tattachDayHandlers($days);\n\t}\n\n\trenderMonth();\n\n    // Re-render calendar if child table data changes\n\ttry {\n\t\tconst tableWrapper = frm.get_field('table_biyv').$wrapper.get(0);\n\t\tif (tableWrapper && !tableWrapper._farm_calendar_observer) {\n\t\t\tconst mo = new MutationObserver(() => {\n\t\t\t\tif (tableWrapper._farm_calendar_timer) clearTimeout(tableWrapper._farm_calendar_timer);\n\t\t\t\ttableWrapper._farm_calendar_timer = setTimeout(() => {\n\t\t\t\t\tgenerate_schedule_calendar(frm);\n\t\t\t\t}, 250);\n\t\t\t});\n\t\t\tmo.observe(tableWrapper, { childList: true, subtree: true });\n\t\t\ttableWrapper._farm_calendar_observer = mo;\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('Farm calendar observer error', e);\n\t}\n}\n\nfrappe.ui.form.on('Crop Intake Schedule table', {\n    refresh(frm) {\n        // Ensure the button is properly set up\n    },\n    review_schedule(frm, cdt, cdn) {\n        // Get the current row's data\n        let row = locals[cdt][cdn];\n        \n        // Fetch the referenced_schedule_document value\n        let schedule_doc = row.referenced_schedule_document;\n        \n        // Check if referenced_schedule_document exists\n        if (schedule_doc) {\n            // Redirect to the Farm Activity Schedule document\n            frappe.set_route(\"Form\", \"Farm Activity Schedule\", schedule_doc);\n        } else {\n            // Show an alert if no document is referenced\n            frappe.msgprint({\n                title: __(\"Missing Reference\"),\n                indicator: \"red\",\n                message: __(\"No referenced schedule document found in this row.\")\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Crop Intake",
  "enabled": 1,
  "modified": "2025-09-20 20:25:25.248793",
  "module": "Savanna Farm Suite",
  "name": "Process Farming Activity",
  "script": "// Initialize global variables for farm activity recording\nwindow.farmActivityCache = {};\nwindow.activityCalendarDialog = null;\nwindow.scheduledDatesCache = {};\n\n// Add CSS styles for the activity calendar\nfunction addActivityCalendarStyles() {\n    const style = document.createElement('style');\n    style.textContent = `\n        .activity-calendar {\n            display: inline-block;\n            width: 100%;\n            border: 1px solid #d1d8dd;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n\n        .activity-calendar-weekdays {\n            display: grid;\n            grid-template-columns: repeat(7, 1fr);\n            background-color: #f5f7fa;\n            font-weight: bold;\n            text-align: center;\n        }\n\n        .activity-calendar-weekdays div {\n            padding: 8px;\n            border-right: 1px solid #d1d8dd;\n        }\n\n        .activity-calendar-weekdays div:last-child {\n            border-right: none;\n        }\n\n        .activity-calendar-days {\n            display: grid;\n            grid-template-columns: repeat(7, 1fr);\n        }\n\n        .activity-calendar-day {\n            padding: 8px;\n            min-height: 60px;\n            border-right: 1px solid #d1d8dd;\n            border-bottom: 1px solid #d1d8dd;\n            cursor: pointer;\n            text-align: center;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n\n        .activity-calendar-day:nth-child(7n) {\n            border-right: none;\n        }\n\n        .activity-calendar-day.empty {\n            background-color: #fafbfc;\n            cursor: default;\n        }\n\n        .activity-calendar-day:hover:not(.empty) {\n            background-color: #e3f2fd;\n            transform: scale(1.05);\n        }\n\n        /* Unique colors for scheduled dates */\n        .activity-calendar-day.scheduled-1 {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-2 {\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-3 {\n            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-4 {\n            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-5 {\n            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-6 {\n            background: linear-gradient(135deg, #30cfd0 0%, #330867 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-header {\n            text-align: center;\n            margin-bottom: 10px;\n            font-size: 18px;\n            font-weight: bold;\n            color: #36414C;\n            padding: 10px;\n            background: #f5f7fa;\n            border-radius: 4px;\n        }\n\n        .activity-calendar-navigation {\n            margin-top: 15px;\n            text-align: center;\n        }\n\n        .activity-calendar-navigation button {\n            margin: 0 5px;\n        }\n\n        .scheduled-activity-indicator {\n            position: absolute;\n            bottom: 2px;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: 10px;\n            padding: 2px 6px;\n            background: rgba(0,0,0,0.3);\n            border-radius: 10px;\n            color: white;\n        }\n\n        .farm-inputs-table {\n            margin-top: 15px;\n        }\n\n        .farm-inputs-table .grid-row {\n            margin-bottom: 10px;\n            padding: 10px;\n            background: #f9f9f9;\n            border-radius: 4px;\n        }\n\n        .legend-container {\n            margin: 15px 0;\n            padding: 10px;\n            background: #f9f9f9;\n            border-radius: 4px;\n        }\n\n        .legend-item {\n            display: inline-block;\n            margin-right: 15px;\n            margin-bottom: 5px;\n        }\n\n        .legend-color {\n            width: 20px;\n            height: 20px;\n            display: inline-block;\n            border-radius: 3px;\n            vertical-align: middle;\n            margin-right: 5px;\n        }\n        .insufficient-stock-row {\n            border-color: #e74c3c !important;\n            background: #fff6f6;\n        }\n\n    `;\n    document.head.appendChild(style);\n}\n\nfrappe.ui.form.on(\"Crop Intake\", {\n    refresh(frm) {\n        if (!frm.is_new()) {\n            frm.add_custom_button(__('Record Farming Activity'), function() {\n                if (frm.is_new()) {\n                    frappe.msgprint(__('Please save the document before recording activities.'));\n                    return;\n                }\n                \n                // Initialize or clear cache\n                window.farmActivityCache = {};\n                \n                // Add styles if not already added\n                if (!document.querySelector('style[data-activity-calendar-styles]')) {\n                    addActivityCalendarStyles();\n                    document.querySelector('style').setAttribute('data-activity-calendar-styles', 'true');\n                }\n                \n                // Open the activity calendar\n                openActivityCalendar(frm);\n                \n            }, __('Action')).addClass('btn-warning');\n        }\n    }\n});\n\n// Function to open the activity recording calendar\nfunction openActivityCalendar(frm) {\n    let currentDate = new Date();\n    let currentMonth = currentDate.getMonth();\n    let currentYear = currentDate.getFullYear();\n    \n    // Create dialog with calendar\n    let dialog = new frappe.ui.Dialog({\n        title: __('Record Farming Activity - ' + frm.doc.name),\n        size: 'extra-large',\n        fields: [\n            {\n                fieldtype: 'HTML',\n                fieldname: 'calendar_container'\n            }\n        ]\n    });\n    \n    window.activityCalendarDialog = dialog;\n    \n    // Load scheduled dates from table_biyv\n    loadScheduledDates(frm, function() {\n        // Generate calendar after loading scheduled dates\n        generateActivityCalendar(dialog, currentMonth, currentYear, frm);\n        addActivityCalendarNavigation(dialog, currentMonth, currentYear, frm);\n    });\n    \n    dialog.show();\n}\n\n// Function to load scheduled dates from table_biyv - FIXED VERSION\nfunction loadScheduledDates(frm, callback) {\n    // Clear the cache first\n    window.scheduledDatesCache = {};\n    \n    // Fetch scheduled dates from the table_biyv using a direct database query\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Farm Activity Schedule',\n            filters: {\n                activity_tied_to_which_crop_batch: frm.doc.name\n            },\n            fields: ['name']\n        },\n        callback: function(r) {\n            if (r.message && r.message.length > 0) {\n                // Get all schedule documents\n                const scheduleNames = r.message.map(item => item.name);\n                \n                // Use a server-side method to get all child table data at once\n                frappe.call({\n                    method: 'farm_management_system.savanna_farm_suite.doctype.crop_intake.crop_intake.get_scheduled_activities',\n                    args: {\n                        schedule_names: scheduleNames\n                    },\n                    callback: function(res) {\n                        if (res.message) {\n                            res.message.forEach((row, index) => {\n                                if (row.scheduled_date) {\n                                    window.scheduledDatesCache[row.scheduled_date] = {\n                                        index: (index % 6) + 1,\n                                        activity: row.activity_being_undertaken || 'Scheduled Activity',\n                                        description: row.status || '',\n                                        assignees: row.staff_name || ''\n                                    };\n                                }\n                            });\n                        }\n                        callback();\n                    }\n                });\n            } else {\n                callback();\n            }\n        }\n    });\n}\n\n// Function to generate activity calendar\nfunction generateActivityCalendar(dialog, month, year, frm) {\n    let firstDay = new Date(year, month, 1);\n    let lastDay = new Date(year, month + 1, 0);\n    let daysInMonth = lastDay.getDate();\n    let startingDay = firstDay.getDay();\n    \n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    \n    // Create calendar HTML with legend\n    let calendarHTML = `\n        <div class=\"activity-calendar-header\">\n            <h3>${monthNames[month]} ${year}</h3>\n        </div>\n        <div class=\"legend-container\">\n            <strong>Click on any set date in the calendar to record Farming Activity.</strong><br>\n        </div>\n        <div class=\"activity-calendar\">\n            <div class=\"activity-calendar-weekdays\">\n                <div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>\n            </div>\n            <div class=\"activity-calendar-days\">\n    `;\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDay; i++) {\n        calendarHTML += `<div class=\"activity-calendar-day empty\"></div>`;\n    }\n    \n    // Add cells for each day of the month\n    for (let i = 1; i <= daysInMonth; i++) {\n        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;\n        const scheduledData = window.scheduledDatesCache[dateStr];\n        const scheduledClass = scheduledData ? ` scheduled-${scheduledData.index}` : '';\n        const title = scheduledData ? `title=\"${scheduledData.activity} - ${scheduledData.assignees}\"` : '';\n        \n        calendarHTML += `\n            <div class=\"activity-calendar-day${scheduledClass}\" data-date=\"${dateStr}\" ${title}>\n                <div style=\"font-size: 16px; margin-bottom: 5px;\">${i}</div>\n                ${scheduledData ? `<div class=\"scheduled-activity-indicator\">${scheduledData.activity.substring(0, 10)}...</div>` : ''}\n            </div>\n        `;\n    }\n    \n    calendarHTML += `</div></div>`;\n    \n    // Set calendar HTML\n    dialog.fields_dict.calendar_container.$wrapper.html(calendarHTML);\n    \n    // Add click event to each day\n    dialog.$wrapper.find('.activity-calendar-day:not(.empty)').on('click', function() {\n        const date = $(this).data('date');\n        openActivityRecordDialog(date, frm, dialog);\n    });\n}\n\n// Function to add navigation to activity calendar\nfunction addActivityCalendarNavigation(dialog, month, year, frm) {\n    const navHTML = `\n        <div class=\"activity-calendar-navigation\">\n            <button class=\"btn btn-default prev-month\">\n                <i class=\"fa fa-chevron-left\"></i> Previous Month\n            </button>\n            <button class=\"btn btn-default today-btn\">\n                Today\n            </button>\n            <button class=\"btn btn-default next-month\">\n                Next Month <i class=\"fa fa-chevron-right\"></i>\n            </button>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.activity-calendar-header').after(navHTML);\n    \n    // Previous month handler\n    dialog.$wrapper.find('.prev-month').on('click', function() {\n        let newMonth = month - 1;\n        let newYear = year;\n        if (newMonth < 0) {\n            newMonth = 11;\n            newYear = year - 1;\n        }\n        generateActivityCalendar(dialog, newMonth, newYear, frm);\n        addActivityCalendarNavigation(dialog, newMonth, newYear, frm);\n    });\n    \n    // Next month handler\n    dialog.$wrapper.find('.next-month').on('click', function() {\n        let newMonth = month + 1;\n        let newYear = year;\n        if (newMonth > 11) {\n            newMonth = 0;\n            newYear = year + 1;\n        }\n        generateActivityCalendar(dialog, newMonth, newYear, frm);\n        addActivityCalendarNavigation(dialog, newMonth, newYear, frm);\n    });\n    \n    // Today button handler\n    dialog.$wrapper.find('.today-btn').on('click', function() {\n        let today = new Date();\n        generateActivityCalendar(dialog, today.getMonth(), today.getFullYear(), frm);\n        addActivityCalendarNavigation(dialog, today.getMonth(), today.getFullYear(), frm);\n    });\n}\n\n// Function to open activity record dialog - REFINED WITH DROPDOWNS\nfunction openActivityRecordDialog(date, frm, parentDialog) {\n    let farmInputsData = [];\n    let labourersData = [];\n    let activitiesData = [];\n    \n    // Create dialog with sections for adding rows\n    let activityDialog = new frappe.ui.Dialog({\n        title: __(`Record Activity for ${frappe.datetime.str_to_user(date)}`),\n        size: 'large',\n        fields: [\n            {\n                fieldname: 'labourers_section',\n                fieldtype: 'Section Break',\n                label: __('Labourers Involved')\n            },\n            {\n                fieldname: 'labourers_html',\n                fieldtype: 'HTML'\n            },\n            {\n                fieldname: 'activities_section',\n                fieldtype: 'Section Break',\n                label: __('Farming Activities Undertaken')\n            },\n            {\n                fieldname: 'activities_html',\n                fieldtype: 'HTML'\n            },\n            {\n                fieldname: 'total_man_hours',\n                fieldtype: 'Float',\n                label: __('Total Man Hours used in this Activity'),\n                reqd: 1,\n                default: 0\n            },\n            {\n                fieldname: 'auto_create_vouchers',\n                fieldtype: 'Check',\n                label: __('Auto-Create Payment Vouchers for ALL Labourers?'),\n                default: 0,\n                description: 'Please Note: Payment Vouchers will be created based on Wage set for each worker.'\n            },\n            {\n                fieldname: 'additional_notes',\n                fieldtype: 'Small Text',\n                label: __('Additional Notes')\n            },\n            {\n                fieldname: 'proof_of_work',\n                fieldtype: 'Attach',\n                label: __('Proof of Work')\n            },\n            {\n                fieldname: 'section_break_1',\n                fieldtype: 'Section Break',\n                label: __('Farm Inputs Used')\n            },\n            {\n                fieldname: 'farm_inputs_html',\n                fieldtype: 'HTML'\n            }\n        ],\n        primary_action_label: __('Record Log'),\n        primary_action: function() {\n            let values = activityDialog.get_values();\n            \n            // Validate required fields\n            if (labourersData.length === 0) {\n                frappe.msgprint(__('Please add at least one labourer'));\n                return;\n            }\n            \n            if (activitiesData.length === 0) {\n                frappe.msgprint(__('Please add at least one farming activity'));\n                return;\n            }\n            \n            // Confirmation dialog\n            frappe.confirm(\n                __('Are you sure you want to record this farming activity log?'),\n                function() {\n                    // Prepare data for server\n                    let activityData = {\n                        selected_date: date,\n                        crop_intake: frm.doc.name,\n                        farming_season: frm.doc.farming_season,\n                        plot: frm.doc.plot_on_which_planting_is_done,\n                        crop: frm.doc.crop_being_planted,\n                        total_man_hours: values.total_man_hours,\n                        farming_activities: activitiesData.map(a => a.activity),\n                        additional_notes: values.additional_notes || '',\n                        labourers: labourersData.map(l => l.labourer),\n                        proof_of_work: values.proof_of_work || '',\n                        auto_create_vouchers: values.auto_create_vouchers,\n                        farm_inputs: farmInputsData\n                    };\n                    \n                    // Call server-side method\n                    frappe.call({\n                        method: 'farm_management_system.savanna_farm_suite.doctype.crop_intake.crop_intake.create_farm_operation_log',\n                        args: {\n                            data: activityData\n                        },\n                        freeze: true,\n                        freeze_message: __('Creating Farm Operation Log...'),\n                        callback: function(r) {\n                            if (r.message) {\n                                let msg = __('Farm Operation Log {0} created successfully', [r.message.farm_log]);\n                                if (r.message.vouchers && r.message.vouchers.length) {\n                                    msg += __(' and Petty Cash Vouchers: {0}', [r.message.vouchers.join(', ')]);\n                                }\n                                frappe.show_alert({\n                                    message: msg,\n                                    indicator: 'green'\n                                });\n                                \n                                frappe.utils.play_sound('success');\n                                activityDialog.hide();\n                                \n                                // Optionally refresh the parent form\n                                frm.reload_doc();\n                            }\n                        },\n                        error: function(r) {\n                            frappe.msgprint(__('Error creating Farm Operation Log: {0}', [r.message]));\n                        }\n                    });\n                }\n            );\n        }\n    });\n    \n    // Fetch options for dropdowns\n    let employeeList = [];\n    let activityList = [];\n    let inputList = [];\n    \n    const empPromise = new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Employee',\n                fields: ['name', 'employee_name'],\n                limit: 0,\n                ignore_permissions: true\n            },\n            callback: function(r) {\n                employeeList = r.message || [];\n                resolve();\n            },\n            error: reject\n        });\n    });\n    \n    const actPromise = new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Crop Activity',\n                fields: ['name'],\n                limit: 0,\n                ignore_permissions: true\n            },\n            callback: function(r) {\n                activityList = r.message || [];\n                resolve();\n            },\n            error: reject\n        });\n    });\n    \n    const inputPromise = new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Farm Inputs',\n                fields: ['name', 'uom'],\n                limit: 0,\n                ignore_permissions: true\n            },\n            callback: function(r) {\n                inputList = r.message || [];\n                resolve();\n            },\n            error: reject\n        });\n    });\n    \n    Promise.all([empPromise, actPromise, inputPromise]).then(() => {\n        // Setup labourers table\n        activityDialog.fields_dict.labourers_html.$wrapper.html(`\n            <div class=\"labourers-container\">\n                <button class=\"btn btn-sm btn-default add-labourer-btn\">\n                    <i class=\"fa fa-plus\"></i> Add Labourer\n                </button>\n                <div class=\"labourers-list\" style=\"margin-top: 10px;\"></div>\n            </div>\n        `);\n        \n        activityDialog.$wrapper.find('.add-labourer-btn').on('click', function() {\n            addLabourerRow(activityDialog, labourersData, employeeList);\n        });\n        \n        // Setup activities table\n        activityDialog.fields_dict.activities_html.$wrapper.html(`\n            <div class=\"activities-container\">\n                <button class=\"btn btn-sm btn-default add-activity-btn\">\n                    <i class=\"fa fa-plus\"></i> Add Activity\n                </button>\n                <div class=\"activities-list\" style=\"margin-top: 10px;\"></div>\n            </div>\n        `);\n        \n        activityDialog.$wrapper.find('.add-activity-btn').on('click', function() {\n            addActivityRow(activityDialog, activitiesData, activityList);\n        });\n        \n        // Setup farm inputs table\n        activityDialog.fields_dict.farm_inputs_html.$wrapper.html(`\n            <div class=\"farm-inputs-container\">\n                <button class=\"btn btn-sm btn-default add-input-btn\">\n                    <i class=\"fa fa-plus\"></i> Add Farm Input\n                </button>\n                <div class=\"farm-inputs-list\" style=\"margin-top: 10px;\"></div>\n            </div>\n        `);\n        \n        activityDialog.$wrapper.find('.add-input-btn').on('click', function() {\n            addFarmInputRow(activityDialog, farmInputsData, inputList);\n        });\n        \n        activityDialog.show();\n    }).catch(() => {\n        frappe.msgprint(__('Error loading options. Please try again.'));\n    });\n}\n\n// Function to add labourer row with dropdown\nfunction addLabourerRow(dialog, labourersData, employeeList) {\n    const rowId = frappe.utils.get_random(5);\n    const rowData = {\n        id: rowId,\n        labourer: '',\n        labourer_name: ''\n    };\n    \n    labourersData.push(rowData);\n    \n    const rowHTML = `\n        <div class=\"labourer-row\" data-row-id=\"${rowId}\" style=\"border: 1px solid #d1d8dd; padding: 10px; margin-bottom: 10px; border-radius: 4px;\">\n            <div class=\"row\">\n                <div class=\"col-md-10\">\n                    <div class=\"form-group\">\n                        <label>Labourer</label>\n                        <select class=\"form-control labourer-select\">\n                            <option value=\"\" disabled selected>Select Labourer</option>\n                            ${employeeList.map(d => `<option value=\"${d.name}\" data-employee-name=\"${d.employee_name || d.name}\">${d.employee_name || d.name}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <button class=\"btn btn-sm btn-danger remove-row-btn\" style=\"margin-top: 25px;\">\n                        <i class=\"fa fa-times\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.labourers-list').append(rowHTML);\n    \n    const $row = dialog.$wrapper.find(`[data-row-id=\"${rowId}\"]`);\n    \n    $row.find('.labourer-select').on('change', function() {\n        const select = this;\n        const val = select.value;\n        const opt = select.options[select.selectedIndex];\n        const name = opt ? opt.dataset.employeeName : '';\n        const row = labourersData.find(r => r.id === rowId);\n        if (row) {\n            row.labourer = val;\n            row.labourer_name = name;\n        }\n    });\n    \n    // Remove row handler\n    $row.find('.remove-row-btn').on('click', function() {\n        $row.remove();\n        const index = labourersData.findIndex(r => r.id === rowId);\n        if (index > -1) {\n            labourersData.splice(index, 1);\n        }\n    });\n}\n\n// Function to add activity row with dropdown\nfunction addActivityRow(dialog, activitiesData, activityList) {\n    const rowId = frappe.utils.get_random(5);\n    const rowData = {\n        id: rowId,\n        activity: ''\n    };\n    \n    activitiesData.push(rowData);\n    \n    const rowHTML = `\n        <div class=\"activity-row\" data-row-id=\"${rowId}\" style=\"border: 1px solid #d1d8dd; padding: 10px; margin-bottom: 10px; border-radius: 4px;\">\n            <div class=\"row\">\n                <div class=\"col-md-10\">\n                    <div class=\"form-group\">\n                        <label>Farming Activity</label>\n                        <select class=\"form-control activity-select\">\n                            <option value=\"\" disabled selected>Select Activity</option>\n                            ${activityList.map(d => `<option value=\"${d.name}\">${d.name}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <button class=\"btn btn-sm btn-danger remove-row-btn\" style=\"margin-top: 25px;\">\n                        <i class=\"fa fa-times\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.activities-list').append(rowHTML);\n    \n    const $row = dialog.$wrapper.find(`[data-row-id=\"${rowId}\"]`);\n    \n    $row.find('.activity-select').on('change', function() {\n        const val = this.value;\n        const row = activitiesData.find(r => r.id === rowId);\n        if (row) {\n            row.activity = val;\n        }\n    });\n    \n    // Remove row handler\n    $row.find('.remove-row-btn').on('click', function() {\n        $row.remove();\n        const index = activitiesData.findIndex(r => r.id === rowId);\n        if (index > -1) {\n            activitiesData.splice(index, 1);\n        }\n    });\n}\n\n// Function to add farm input row with dropdown + Current Stock column\nfunction addFarmInputRow(dialog, farmInputsData, inputList) {\n    const rowId = frappe.utils.get_random(5);\n    const rowData = {\n        id: rowId,\n        farm_input: '',\n        uom: '',\n        quantity: 0,\n        current_stock: 0\n    };\n    \n    farmInputsData.push(rowData);\n    \n    const rowHTML = `\n        <div class=\"farm-input-row\" data-row-id=\"${rowId}\" style=\"border: 1px solid #d1d8dd; padding: 10px; margin-bottom: 10px; border-radius: 4px;\">\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <label>Farm Input Used</label>\n                        <select class=\"form-control farm-input-select\" data-fieldname=\"farm_input\">\n                            <option value=\"\" disabled selected>Select Farm Input</option>\n                            ${inputList.map(d => `<option value=\"${d.name}\" data-uom=\"${d.uom || ''}\">${d.name}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <label>Default UOM</label>\n                        <input type=\"text\" class=\"form-control uom-field\" data-fieldname=\"uom\" readonly>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <label>Quantity Used</label>\n                        <input type=\"number\" class=\"form-control quantity-field\" data-fieldname=\"quantity\" step=\"0.01\">\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <label>Current Stock</label>\n                        <input type=\"text\" class=\"form-control current-stock-field\" data-fieldname=\"current_stock\" readonly>\n                        <small class=\"stock-warning text-danger\" style=\"display:none;\">Requested qty > Current stock</small>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <button class=\"btn btn-sm btn-danger remove-row-btn\" style=\"margin-top: 25px;\">\n                        <i class=\"fa fa-times\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.farm-inputs-list').append(rowHTML);\n    \n    // Setup farm input select\n    const $row = dialog.$wrapper.find(`[data-row-id=\"${rowId}\"]`);\n    \n    $row.find('.farm-input-select').on('change', function() {\n        const select = this;\n        const val = select.value;\n        const opt = select.options[select.selectedIndex];\n        const uom = opt ? opt.dataset.uom : '';\n        $row.find('.uom-field').val(uom);\n        const row = farmInputsData.find(r => r.id === rowId);\n        if (row) {\n            row.farm_input = val;\n            row.uom = uom;\n            row.current_stock = 0; // reset while fetching\n            $row.find('.current-stock-field').val('');\n            $row.removeClass('insufficient-stock-row');\n            $row.find('.stock-warning').hide();\n        }\n\n        // Call server to get current stock for selected input\n        if (val) {\n            frappe.call({\n                method: 'farm_management_system.savanna_farm_suite.doctype.crop_seedlings.crop_seedlings.get_current_stock',\n                args: { item_code: val },\n                freeze: false,\n                callback: function(res) {\n                    if (res && res.message) {\n                        const stock_info = res.message;\n                        const qty_after = parseFloat(stock_info.qty_after_transaction) || 0;\n                        // set UI and data\n                        $row.find('.current-stock-field').val(qty_after);\n                        const row = farmInputsData.find(r => r.id === rowId);\n                        if (row) {\n                            row.current_stock = qty_after;\n                            // If quantity already entered and exceeds stock, show inline warning\n                            const enteredQty = parseFloat($row.find('.quantity-field').val()) || 0;\n                            if (enteredQty > qty_after) {\n                                $row.addClass('insufficient-stock-row');\n                                $row.find('.stock-warning').show();\n                            } else {\n                                $row.removeClass('insufficient-stock-row');\n                                $row.find('.stock-warning').hide();\n                            }\n                        }\n                    } else {\n                        // No message or failure — leave as blank/0\n                        $row.find('.current-stock-field').val('');\n                    }\n                },\n                error: function() {\n                    // failure — ignore, but leave empty\n                    $row.find('.current-stock-field').val('');\n                }\n            });\n        }\n    });\n    \n    // Handle quantity change\n    $row.find('.quantity-field').on('input change', function() {\n        const row = farmInputsData.find(r => r.id === rowId);\n        const entered = parseFloat($(this).val()) || 0;\n        if (row) {\n            row.quantity = entered;\n            // check against current_stock (if available)\n            const avail = parseFloat(row.current_stock) || 0;\n            if (avail && entered > avail) {\n                $row.addClass('insufficient-stock-row');\n                $row.find('.stock-warning').show();\n            } else {\n                $row.removeClass('insufficient-stock-row');\n                $row.find('.stock-warning').hide();\n            }\n        }\n    });\n    \n    // Remove row handler\n    $row.find('.remove-row-btn').on('click', function() {\n        $row.remove();\n        const index = farmInputsData.findIndex(r => r.id === rowId);\n        if (index > -1) {\n            farmInputsData.splice(index, 1);\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Crop Intake",
  "enabled": 1,
  "modified": "2025-09-21 01:12:34.033061",
  "module": "Savanna Farm Suite",
  "name": "Render Chart",
  "script": "frappe.ui.form.on('Crop Intake', {\n    refresh(frm) {\n        // Wrap chart generation in a timeout to prevent rendering errors\n        // This gives the DOM time to draw the container for the chart\n        setTimeout(() => {\n            const wrapper = frm.get_field(\"farm_input_usage_trend\").$wrapper;\n            wrapper.empty();\n\n            const source_data = frm.doc.table_voqq;\n\n            if (!source_data || source_data.length === 0) {\n                wrapper.html(`<div class=\"text-muted text-center\" style=\"padding: 2rem;\">\n                    No farm input usage data to display.\n                </div>`);\n                return;\n            }\n\n            // 1. Process and Aggregate Data\n            let data_by_date = {};\n            let uom_lookup = {};\n            let all_agents = new Set();\n\n            source_data.forEach(d => {\n                if (!d.date_of_use || !d.farming_agent_used || !d.quantity_of_farming_agent_used) {\n                    return;\n                }\n\n                if (!data_by_date[d.date_of_use]) {\n                    data_by_date[d.date_of_use] = {};\n                    uom_lookup[d.date_of_use] = {};\n                }\n\n                const current_qty = data_by_date[d.date_of_use][d.farming_agent_used] || 0;\n                data_by_date[d.date_of_use][d.farming_agent_used] = current_qty + d.quantity_of_farming_agent_used;\n\n                // Important: This relies on 'd.agents_uom' having a value\n                uom_lookup[d.date_of_use][d.farming_agent_used] = d.agents_uom;\n\n                all_agents.add(d.farming_agent_used);\n            });\n            \n            // **DEBUGGING STEP**: Check your browser's console (F12) for this output\n            // It will show you if the UOMs are being captured correctly.\n            console.log(\"UOM Lookup Table:\", uom_lookup);\n\n            // 2. Prepare Data for Frappe Charts\n            const sorted_agents = Array.from(all_agents).sort();\n            const labels = Object.keys(data_by_date).sort((a, b) => new Date(a) - new Date(b));\n\n            const datasets = sorted_agents.map(agent => {\n                return {\n                    name: agent,\n                    values: labels.map(date => data_by_date[date][agent] || 0)\n                };\n            });\n\n            // 3. Render the Chart\n            new frappe.Chart(wrapper[0], {\n                title: \"Farm Input Usage Trend\",\n                data: {\n                    labels: labels,\n                    datasets: datasets\n                },\n                type: 'bar',\n                height: 300,\n                colors: ['#743EE2', '#2E93fA', '#66DA26', '#E91E63', '#FF9800'],\n                barOptions: {\n                    stacked: 1\n                },\n                tooltipOptions: {\n                    format: (points) => {\n                        if (!points || points.length === 0) return;\n\n                        const point = points[0];\n                        const date_label = frappe.datetime.str_to_user(point.label);\n\n                        let tooltip_html = `<div class=\"graph-tooltip-title\">${date_label}</div>\n                                            <ul class=\"tooltip-list\">`;\n\n                        points.filter(p => p.value > 0).forEach(p => {\n                            const agent = p.dataset_name;\n                            const quantity = p.value;\n                            \n                            // More robust lookup for the UOM\n                            const uom = (uom_lookup[p.label] && uom_lookup[p.label][agent]) ? uom_lookup[p.label][agent] : '';\n\n                            tooltip_html += `<li>\n                                <div class=\"flex justify-between\">\n                                    <div>\n                                        <span class=\"tooltip-legend-color\" style=\"background-color: ${p.color}\"></span>\n                                        <span class=\"tooltip-label\">${agent}</span>\n                                    </div>\n                                    <span class=\"tooltip-value\">${quantity} ${uom}</span>\n                                </div>\n                            </li>`;\n                        });\n\n                        tooltip_html += `</ul>`;\n                        return tooltip_html;\n                    }\n                }\n            });\n        }, 300); // 300ms delay to ensure the container is ready\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Poultry Batches",
  "enabled": 1,
  "modified": "2025-09-22 11:12:01.059402",
  "module": "Savanna Farm Suite",
  "name": "Cull Poultry",
  "script": "frappe.ui.form.on('Poultry Batches', {\n    refresh(frm) {\n        if (frm.is_new()) return;\n\n        // show only for users with write permission\n        if (!frm.perm || !frm.perm.some(p => p.write)) return;\n\n        const label = __('Cull Animals');\n\n        // Remove any existing duplicate buttons (helps during hot reloads)\n        frm.page.wrapper.find(`button[data-label=\"${label}\"]`).remove();\n\n        // Add a standalone button (no group -> appears in header as a primary action)\n        frm.add_custom_button(label, () => handleCullClick(frm), null);\n\n        // Style as dark primary\n        const $btn = frm.page.wrapper.find(`button[data-label=\"${label}\"]`);\n        if ($btn.length) {\n            $btn\n                .removeClass('btn-primary')\n                .addClass('btn-dark-primary')\n                .attr('type', 'button')\n                .css({\n                    \"color\": \"white\",\n                    \"background-color\": \"#14141f\",\n                    \"font-weight\": \"800\",\n                    \"margin-left\": \"8px\"\n                });\n        }\n    }\n});\n\n\n/**\n * Handler for the Cull button click — now with batch link + current_count autopopulate.\n */\nfunction handleCullClick(frm) {\n    const label = __('Cull Animals'); // keep same label as refresh() uses\n\n    // Locate the header button (safe-guard)\n    const $btn = frm.page.wrapper.find(`button[data-label=\"${label}\"]`);\n    if ($btn.data('processing')) return;\n\n    const d = new frappe.ui.Dialog({\n        title: label,\n        fields: [\n            {\n                fieldtype: 'Link',\n                fieldname: 'poultry_batch',\n                label: __('Specify Poultry Batch'),\n                options: 'Poultry Batches',\n                reqd: 1,\n                default: frm.doc.name || ''\n            },\n            {\n                fieldtype: 'Int',\n                fieldname: 'current_count',\n                label: __('Current Poultry Count'),\n                read_only: 1,\n                description: __('Autopopulated: total_animals - mortality_count')\n            },\n            {\n                fieldtype: 'Int',\n                fieldname: 'count',\n                label: __('Number of chickens to cull'),\n                reqd: 1,\n                description: __('Enter a positive whole number (no decimals)'),\n                placeholder: __('e.g. 2, 30')\n            }\n        ],\n        primary_action_label: __('Cull'),\n        primary_action(values) {\n            const batch = values.poultry_batch;\n            const count = parseInt(values.count, 10);\n            const current = parseInt(values.current_count || 0, 10);\n\n            // final validations\n            if (!batch) {\n                frappe.show_alert({ message: __('Please specify a Poultry Batch.'), indicator: 'red' }, 6);\n                return;\n            }\n            if (isNaN(count) || count <= 0) {\n                frappe.show_alert({ message: __('Please enter a positive whole number for the count.'), indicator: 'red' }, 6);\n                return;\n            }\n            if (isNaN(current) || current < 0) {\n                frappe.show_alert({ message: __('Current Poultry Count is unavailable. Please check the selected batch.'), indicator: 'red' }, 6);\n                return;\n            }\n            if (count > current) {\n                frappe.show_alert({ message: __('Cull count ({0}) exceeds current poultry count ({1}).', [count, current]), indicator: 'red' }, 8);\n                return;\n            }\n\n            d.hide();\n\n            // confirmation\n            frappe.confirm(\n                __('This Action is irreversible! Do you want to continue?'),\n                () => {\n                    // mark header button processing (prevent re-clicks)\n                    $btn.data('processing', true).prop('disabled', true);\n\n                    frappe.dom.freeze(__('Applying cull...'));\n                    frappe.call({\n                        method: 'farm_management_system.savanna_farm_suite.doctype.poultry_batches.poultry_batches.cull_poultry_batch',\n                        args: {\n                            batch_name: batch,\n                            cull_count: count\n                        },\n                        callback: function (r) {\n                            frappe.dom.unfreeze();\n                            $btn.data('processing', false).prop('disabled', false);\n\n                            if (r.message && r.message.success) {\n                                frappe.utils.play_sound('success');\n                                frappe.show_alert({\n                                    message: __(\n                                        'Cull applied. New mortality_count: {0}, mortality_rate: {1}%',\n                                        [r.message.mortality_count, (r.message.mortality_rate || 0).toFixed(3)]\n                                    ),\n                                    indicator: 'green'\n                                }, 7);\n                                frm.reload_doc();\n                            } else {\n                                const err = (r.message && r.message.error) || (r.exc ? r.exc : __('Unknown error'));\n                                frappe.show_alert({ message: __('Error: {0}', [err]), indicator: 'red' }, 10);\n                            }\n                        },\n                        error: function () {\n                            frappe.dom.unfreeze();\n                            $btn.data('processing', false).prop('disabled', false);\n                            frappe.show_alert({ message: __('Failed to call server'), indicator: 'red' }, 10);\n                        }\n                    });\n                },\n                () => {\n                    // cancelled\n                }\n            );\n        }\n    });\n\n    // show dialog\n    d.show();\n    d.$wrapper.find('.modal-dialog').addClass('modal-md');\n\n    // get primary action button DOM so we can enable/disable it\n    const $primary_btn = d.$wrapper.find('.modal-footer .btn-primary');\n    // start disabled until a valid batch with current_count > 0 exists\n    if ($primary_btn.length) $primary_btn.prop('disabled', true);\n\n    // helper to fetch totals and set current_count, also enable/disable primary button\n    function fetchAndSetCurrentCount(batch_name) {\n        d.set_value('current_count', ''); // clear while fetching\n\n        if (!batch_name) {\n            d.set_value('current_count', '');\n            if ($primary_btn.length) $primary_btn.prop('disabled', true);\n            return;\n        }\n\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Poultry Batches',\n                filters: { name: batch_name },\n                fieldname: ['total_animals', 'mortality_count']\n            },\n            callback: function (r) {\n                if (!r || !r.message) {\n                    d.set_value('current_count', '');\n                    frappe.show_alert({ message: __('Unable to fetch batch data.'), indicator: 'red' }, 6);\n                    if ($primary_btn.length) $primary_btn.prop('disabled', true);\n                    return;\n                }\n\n                const total = parseFloat(r.message.total_animals || 0);\n                const mort = parseFloat(r.message.mortality_count || 0);\n                let current = Math.round(total - mort);\n                if (!isFinite(current) || current < 0) current = 0;\n\n                d.set_value('current_count', current);\n\n                // enable primary only if current > 0\n                if ($primary_btn.length) $primary_btn.prop('disabled', !(current > 0));\n            },\n            error: function () {\n                d.set_value('current_count', '');\n                frappe.show_alert({ message: __('Network error fetching batch data.'), indicator: 'red' }, 8);\n                if ($primary_btn.length) $primary_btn.prop('disabled', true);\n            }\n        });\n    }\n\n    // If the dialog default included frm.doc.name, fetch now\n    const initial_batch = frm.doc.name || '';\n    if (initial_batch) {\n        fetchAndSetCurrentCount(initial_batch);\n    }\n\n    // Listen to Link field changes (both typing/select and awesomplete event)\n    d.$wrapper.on('change', 'input[data-fieldname=\"poultry_batch\"]', function() {\n        const batch = $(this).val();\n        fetchAndSetCurrentCount(batch);\n    });\n    d.$wrapper.on('awesomplete-selectcomplete', 'input[data-fieldname=\"poultry_batch\"]', function() {\n        const batch = $(this).val();\n        fetchAndSetCurrentCount(batch);\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Crop Intake",
  "enabled": 1,
  "modified": "2025-09-23 05:09:07.019702",
  "module": "Savanna Farm Suite",
  "name": "Record Harvest",
  "script": "frappe.ui.form.on('Crop Intake', {\n\trefresh(frm) {\n\t\tfrm.add_custom_button(__('Record Harvest'), function() {\n                if (frm.is_new()) {\n                    frappe.msgprint(__('Please save the document before recording harvest.'));\n                    return;\n                }\n                \n                openHarvestDialog(frm);\n                \n            }, __('Action')).addClass('btn-primary');\n\n\t\tif (frm.is_new()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wrapper = frm.fields_dict.harvest_trend.wrapper;\n\t\twrapper.innerHTML = `\n\t\t\t<div id=\"harvest-chart\" style=\"height: 300px;\"></div>\n\t\t\t<div id=\"stock-info\" style=\"color: red; font-weight: bold; margin-top: 20px;\"></div>\n\t\t`;\n\n\t\tconst harvests = frm.doc.table_yuhl || [];\n\t\tif (!harvests.length) {\n\t\t\t$(wrapper).find('#harvest-chart').html('<p>No harvest data available.</p>');\n\t\t\treturn;\n\t\t}\n\n\t\tconst data_map = {};\n\t\tconst product_uom = {};\n\t\tharvests.forEach(h => {\n\t\t\tconst date = h.date_of_collection;\n\t\t\tconst prod = h.product_collected;\n\t\t\tif (!data_map[date]) data_map[date] = {};\n\t\t\tif (!data_map[date][prod]) data_map[date][prod] = 0;\n\t\t\tdata_map[date][prod] += h.quantity_collected;\n\t\t\tif (!product_uom[prod]) product_uom[prod] = h.products_default_uom;\n\t\t});\n\n\t\tconst labels = Object.keys(data_map).sort();\n\t\tconst products = [...new Set(harvests.map(h => h.product_collected))];\n\n\t\tconst datasets = products.map(prod => ({\n\t\t\tname: prod,\n\t\t\tvalues: labels.map(date => data_map[date][prod] || 0),\n\t\t\tchartType: 'bar'\n\t\t}));\n\n\t\tconst colors = ['#7cd6fd', '#743ee2', '#ff5858', '#ffa00a', '#0acf97', '#fa5c7c'];\n\t\t\n\t\tnew frappe.Chart('#harvest-chart', {\n\t\t\tdata: {\n\t\t\t\tlabels: labels,\n\t\t\t\tdatasets: datasets\n\t\t\t},\n\t\t\ttype: 'bar',\n\t\t\theight: 300,\n\t\t\tcolors: products.map((p, i) => colors[i % colors.length]),\n\t\t\taxisOptions: {\n\t\t\t\txAxisMode: 'tick',\n\t\t\t\txIsSeries: false\n\t\t\t},\n\t\t\tbarOptions: {\n\t\t\t\tstacked: false,\n\t\t\t\tspaceRatio: 0.5\n\t\t\t},\n\t\t\ttooltipOptions: {\n\t\t\t\tformatTooltipX: d => d,\n\t\t\t\tformatTooltipY: (value, datasetName) => {\n\t\t\t\t\tconst uom = product_uom[datasetName] || '';\n\t\t\t\t\treturn value + ' ' + uom;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst promises = products.map(prod => {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: 'farm_management_system.savanna_farm_suite.doctype.crop_seedlings.crop_seedlings.get_current_stock',\n\t\t\t\t\targs: { item_code: prod },\n\t\t\t\t\tcallback: r => {\n\t\t\t\t\t\tresolve({ product: prod, data: r.message || {} });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tPromise.all(promises).then(results => {\n\t\t\tlet html = '';\n\t\t\tresults.forEach(res => {\n\t\t\t\tconst d = res.data;\n\t\t\t\thtml += `\n\t\t\t\t\t${res.product}<br>\n\t\t\t\t\tCurrent Stock: ${d.qty_after_transaction || 'N/A'}<br>\n\t\t\t\t\tStock Value: ${d.stock_value || 'N/A'}<br>\n\t\t\t\t\tCurrent Valuation Rate: ${d.valuation_rate || 'N/A'}<br><br>\n\t\t\t\t`;\n\t\t\t});\n\t\t\t$(wrapper).find('#stock-info').html(html);\n\t\t});\n\t}\n});\n\nfunction openHarvestDialog(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: __('Record Harvest'),\n        fields: [\n            { \n                fieldtype: 'Date', \n                fieldname: 'harvesting_date', \n                label: __('Harvesting Date'), \n                default: frappe.datetime.get_today(), \n                reqd: 1 \n            },\n            { \n                fieldtype: 'Link', \n                fieldname: 'crop', \n                label: __('Crop being Harvested'), \n                options: 'Crop', \n                reqd: 1 \n            },\n            { \n                fieldtype: 'Link', \n                fieldname: 'crop_batch', \n                label: __('Specify Crop Batch'), \n                options: 'Crop Intake', \n                reqd: 1,\n                default: frm.doc.name,\n                read_only: 1\n            },\n            {\n                fieldtype: 'Table',\n                fieldname: 'harvest_table',\n                label: __('Harvest Details'),\n                fields: [\n                    { \n                        fieldtype: 'Link', \n                        fieldname: 'crop_product', \n                        label: __('Crop Product'), \n                        options: 'Crop Products', \n                        reqd: 1, \n                        in_list_view: 1 \n                    },\n                    { \n                        fieldtype: 'Link', \n                        fieldname: 'default_uom', \n                        label: __('Default UOM'), \n                        options: 'UOM', \n                        read_only: 1, \n                        in_list_view: 1 \n                    },\n                    { \n                        fieldtype: 'Float', \n                        fieldname: 'quantity_harvested', \n                        label: __('Quantity Harvested'), \n                        reqd: 1, \n                        in_list_view: 1 \n                    }\n                ]\n            }\n        ],\n        primary_action_label: __('Record Harvest'),\n        primary_action: function() {\n            const values = dialog.get_values(true);\n            \n            // Validate future date\n            const today = frappe.datetime.get_today();\n            if (values.harvesting_date > today) {\n                frappe.msgprint({\n                    title: __('Invalid Date'),\n                    message: __('Harvesting Date cannot be a future date.'),\n                    indicator: 'red'\n                });\n                return;\n            }\n\n            // Validate rows\n            if (!values.harvest_table || values.harvest_table.length === 0) {\n                frappe.msgprint(__('Please add at least one product to the harvest table.'));\n                return;\n            }\n\n            frappe.warn(\n                __('Are you sure you want to record this harvest?'),\n                __('This action will update multiple documents and create stock entries. This cannot be undone.'),\n                () => {\n                    frappe.dom.freeze(__('Recording harvest...'));\n                    frappe.call({\n                        method: 'farm_management_system.savanna_farm_suite.doctype.crop_intake.crop_intake.record_harvest_entry',\n                        args: {\n                            crop_batch: values.crop_batch,\n                            harvesting_date: values.harvesting_date,\n                            crop: values.crop,\n                            rows: values.harvest_table\n                        },\n                        callback: function(r) {\n                            frappe.dom.unfreeze();\n                            if (!r.exc && r.message) {\n                                frappe.utils.play_sound('success');\n                                dialog.hide();\n                                frm.refresh();\n                                frappe.show_alert({ \n                                    message: __('Harvest recorded successfully'), \n                                    indicator: 'green' \n                                });\n                            } else if (r.exc) {\n                                frappe.msgprint({ \n                                    title: __('Error'), \n                                    message: r.exc, \n                                    indicator: 'red' \n                                });\n                            }\n                        },\n                        error: function() {\n                            frappe.dom.unfreeze();\n                            frappe.msgprint({ \n                                title: __('Network Error'), \n                                message: __('Please try again.'), \n                                indicator: 'red' \n                            });\n                        }\n                    });\n                },\n                'Continue',\n                true\n            );\n        }\n    });\n\n    dialog.show();\n    dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n\n    // When crop is selected, fetch and populate crop products\n    dialog.$wrapper.on('change', 'input[data-fieldname=\"crop\"]', function() {\n        const crop = $(this).val();\n        if (!crop) {\n            clearHarvestTable(dialog);\n            return;\n        }\n\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Crop Products',\n                filters: { crop: crop },\n                fields: ['name', 'default_uom'],\n                limit_page_length: 100\n            },\n            callback: function(r) {\n                if (r.message && r.message.length > 0) {\n                    populateHarvestTable(dialog, r.message);\n                } else {\n                    clearHarvestTable(dialog);\n                    frappe.show_alert({ \n                        message: __('No crop products found for the selected crop'), \n                        indicator: 'orange' \n                    });\n                }\n            }\n        });\n    });\n\n    // Auto-fill default UOM when crop product is selected\n    dialog.$wrapper.on('awesomplete-selectcomplete', 'input[data-fieldname=\"crop_product\"]', function() {\n        const $input = $(this);\n        const cropProduct = $input.val();\n        const $row = $input.closest('.grid-row');\n        const rowName = $row.attr('data-name');\n        const grid = dialog.fields_dict.harvest_table.grid;\n        \n        if (!grid || !cropProduct) return;\n\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: { \n                doctype: 'Crop Products', \n                filters: { name: cropProduct }, \n                fieldname: 'default_uom' \n            },\n            callback: function(r) {\n                const uom = (r && r.message && r.message.default_uom) || '';\n                const row = grid.get_row(rowName);\n                if (row && row.doc) {\n                    row.doc.default_uom = uom;\n                    if (row.refresh_field) row.refresh_field('default_uom');\n                }\n            }\n        });\n    });\n\n    // Prevent future date on blur\n    dialog.$wrapper.on('blur', 'input[data-fieldname=\"harvesting_date\"]', function() {\n        const $input = $(this);\n        const val = $input.val();\n        if (!val) return;\n        const today = frappe.datetime.get_today();\n\n        if (val > today) {\n            frappe.msgprint({\n                title: __('Invalid Date'),\n                message: __('Harvesting Date cannot be a future date. The value has been reset to today.'),\n                indicator: 'orange'\n            });\n            dialog.set_value('harvesting_date', today);\n            $input.val(today);\n        }\n    });\n}\n\nfunction clearHarvestTable(dialog) {\n    const tableField = dialog.fields_dict.harvest_table;\n    if (tableField && tableField.grid) {\n        tableField.grid.remove_all();\n    }\n}\n\nfunction populateHarvestTable(dialog, cropProducts) {\n    const tableField = dialog.fields_dict.harvest_table;\n    if (!tableField || !tableField.grid) return;\n\n    // Clear existing rows\n    tableField.grid.remove_all();\n\n    // Add rows for each crop product\n    cropProducts.forEach(product => {\n        const row = tableField.grid.add_new_row();\n        row.doc.crop_product = product.name;\n        row.doc.default_uom = product.default_uom;\n        row.doc.quantity_harvested = 0.0;\n        \n        // Refresh fields to show values\n        if (row.refresh_field) {\n            row.refresh_field('crop_product');\n            row.refresh_field('default_uom');\n            row.refresh_field('quantity_harvested');\n        }\n    });\n\n    tableField.grid.refresh();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Poultry Batches",
  "enabled": 1,
  "modified": "2025-09-23 08:39:53.584003",
  "module": "Savanna Farm Suite",
  "name": "Collection - Poultry Form",
  "script": "// farm_management_system/public/js/poultry_batches_form.js\nfrappe.ui.form.on('Poultry Batches', {\n\trefresh: function(frm) {\n\t\t// Add the form button (styled like you requested)\n\t\tconst $btn = frm.add_custom_button(__('Make Collection'), function() {\n\t\t\tconst dialog = new frappe.ui.Dialog({\n\t\t\t\ttitle: __('Make Collection'),\n\t\t\t\tfields: [\n\t\t\t\t\t{ fieldtype: 'Date', fieldname: 'date_of_collection', label: __('Date of Collection'), default: frappe.datetime.get_today(), reqd: 1 },\n\t\t\t\t\t{ fieldtype: 'Link', fieldname: 'animal', label: __('Specify Animal'), options: 'Animals', default: frm.doc.animal || \"Chicken\", reqd: 1 },\n\t\t\t\t\t{\n\t\t\t\t\t\tfieldtype: 'Table',\n\t\t\t\t\t\tfieldname: 'production_table',\n\t\t\t\t\t\tlabel: __('Collections Table'),\n\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t{ fieldtype: 'Link', fieldname: 'poultry_batch', label: __('Poultry Batch'), options: 'Poultry Batches', in_list_view: 1 },\n\t\t\t\t\t\t\t{ fieldtype: 'Link', fieldname: 'animal_product', label: __('Animal Product'), options: 'Animal Products', reqd: 1, in_list_view: 1 },\n\t\t\t\t\t\t\t{ fieldtype: 'Data', fieldname: 'default_uom', label: __('Default UOM'), read_only: 1, in_list_view: 1 },\n\t\t\t\t\t\t\t{ fieldtype: 'Float', fieldname: 'quantity_collected', label: __('Quantity Collected'), reqd: 1, in_list_view: 1 }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tprimary_action_label: __('Make Entry'),\n\t\t\t\tprimary_action: function() {\n\t\t\t\t\tconst dvalues = dialog.get_values(true);\n\n\t\t\t\t\t// Prevent future date\n\t\t\t\t\tconst selected_date = dvalues && dvalues.date_of_collection;\n\t\t\t\t\tconst today = frappe.datetime.get_today();\n\t\t\t\t\tif (selected_date && selected_date > today) {\n\t\t\t\t\t\tfrappe.show_alert({ message: __('Date of Collection cannot be a future date.'), indicator: 'red' }, 5);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rows = dvalues.production_table || [];\n\t\t\t\t\tif (!rows.length) {\n\t\t\t\t\t\tfrappe.show_alert({ message: __('No products found to collect.'), indicator: 'orange' }, 5);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ensure only first row is considered (safety)\n\t\t\t\t\tconst single_row = rows[0];\n\n\t\t\t\t\tfrappe.warn(\n\t\t\t\t\t\t__('Are you sure you want to proceed?'),\n\t\t\t\t\t\t__('Please Note this Action is Irreversible'),\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tfrappe.dom.freeze(__('Creating collection...'));\n\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\tmethod: 'farm_management_system.savanna_farm_suite.doctype.poultry_batches.poultry_batches.create_collection_entry',\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\tdate_of_collection: dvalues.date_of_collection,\n\t\t\t\t\t\t\t\t\trows: [ single_row ]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\t\t\t\tfrappe.dom.unfreeze();\n\t\t\t\t\t\t\t\t\tif (!r.exc && r.message) {\n\t\t\t\t\t\t\t\t\t\tfrappe.utils.play_sound('success');\n\t\t\t\t\t\t\t\t\t\tdialog.hide();\n\t\t\t\t\t\t\t\t\t\tfrm.reload_doc && frm.reload_doc();\n\t\t\t\t\t\t\t\t\t\tfrappe.show_alert({ message: __('Collection recorded'), indicator: 'green' });\n\t\t\t\t\t\t\t\t\t} else if (r.exc) {\n\t\t\t\t\t\t\t\t\t\tfrappe.show_alert({ message: __('Error: ') + (r.exc || __('Unknown error occurred')), indicator: 'red' }, 10);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\t\t\tfrappe.dom.unfreeze();\n\t\t\t\t\t\t\t\t\tfrappe.show_alert({ message: __('Network Error: Please try again.'), indicator: 'red' }, 10);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'Continue',\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdialog.show();\n\t\t\tdialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n\n\t\t\t// Convenience references\n\t\t\tconst tbl = dialog.fields_dict.production_table;\n\t\t\tif (!tbl) return;\n\t\t\tconst grid = tbl.grid;\n\n\t\t\t// --- Populate a single row immediately; enforce poultry_batch = current doc's name ---\n\t\t\tconst initial_row = {\n\t\t\t\tpoultry_batch: frm.doc.name,\n\t\t\t\tanimal_product: '',\n\t\t\t\tdefault_uom: '',\n\t\t\t\tquantity_collected: 0.0\n\t\t\t};\n\n\t\t\t// place the one row into the dialog's child table\n\t\t\ttbl.df.data = [ initial_row ];\n\t\t\tgrid.refresh();\n\n\t\t\t// make the poultry_batch cell read-only and remove row add/remove UI\n\t\t\ttry {\n\t\t\t\t// per-row adjustments\n\t\t\t\tif (grid.grid_rows && grid.grid_rows.length) {\n\t\t\t\t\tconst gr = grid.grid_rows[0];\n\t\t\t\t\t// set the input value just to be safe\n\t\t\t\t\tif (gr && gr.fields_map && gr.fields_map.poultry_batch) {\n\t\t\t\t\t\tgr.fields_map.poultry_batch.df.read_only = 1;\n\t\t\t\t\t\t// ensure input is read-only\n\t\t\t\t\t\ttry { gr.fields_map.poultry_batch.$input && gr.fields_map.poultry_batch.$input.prop('readonly', true); } catch (e) {}\n\t\t\t\t\t}\n\n\t\t\t\t\t// hide remove button for this row\n\t\t\t\t\ttry { gr.toggle_remove_button && gr.toggle_remove_button(false); } catch (e) {}\n\t\t\t\t}\n\n\t\t\t\t// hide global add-row buttons so no new rows can be added\n\t\t\t\tdialog.$wrapper.find('.grid-add-row, .grid-add-rows, .grid-row-add').hide();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn('Could not lock child table to single row', e);\n\t\t\t}\n\n\t\t\t// When animal selection changes in dialog, filter animal_product; but preserve poultry_batch value\n            \t\t\t// --- refined: set_product_query_for_animal + handlers ---\n            function set_product_query_for_animal(animal_name) {\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n            \n                const get_query_fn = function() {\n                    if (!animal_name) return { filters: {} };\n                    return { filters: { product_tied_to_which_animal: animal_name } };\n                };\n            \n                // 1) Apply to top-level grid field if available\n                try {\n                    if (typeof grid.get_field === 'function') {\n                        const topField = grid.get_field('animal_product');\n                        if (topField) {\n                            topField.get_query = get_query_fn;\n                            if (topField.df) topField.df.get_query = get_query_fn;\n                        }\n                    }\n                } catch (e) {\n                    console.warn('set_product_query_for_animal: top-level set failed', e);\n                }\n            \n                // 2) Apply per-row (reliable)\n                try {\n                    (grid.grid_rows || []).forEach(function(gr) {\n                        try {\n                            const f = gr.fields_map && gr.fields_map.animal_product;\n                            if (f) {\n                                f.get_query = get_query_fn;\n                                if (f.df) f.df.get_query = get_query_fn;\n            \n                                // If the animal changed, clear any product that might no longer be valid.\n                                // This avoids showing wrong product values that don't match the selected animal.\n                                if (gr.doc && gr.doc.animal_product) {\n                                    // safest behaviour: clear product so user picks a valid one for the new animal\n                                    gr.doc.animal_product = '';\n                                    if (gr.refresh_field) gr.refresh_field('animal_product');\n                                }\n                            }\n                        } catch (inner) { /* ignore per-row errors */ }\n                    });\n                } catch (e) {\n                    console.warn('set_product_query_for_animal: per-row set failed', e);\n                }\n            \n                // Finally refresh grid to ensure UI updates\n                try { grid.refresh(); } catch (e) { /* ignore */ }\n            }\n            \n            // attach change listener for animal field inside the dialog\n            dialog.$wrapper.on('change', 'input[data-fieldname=\"animal\"]', function() {\n                const animal = $(this).val();\n            \n                // apply the query and clear any stale products\n                set_product_query_for_animal(animal);\n            \n                // additional UX: if you want to pre-populate the single row's default_uom or\n                // available products, you can fetch product list here and optionally fill a\n                // small dropdown. For now we only ensure filtering and clearing stale values.\n            });\n            \n            // When an animal_product link is chosen, auto-fill default_uom for that row\n            dialog.$wrapper.on('awesomplete-selectcomplete', 'input[data-fieldname=\"animal_product\"]', function() {\n                const $input = $(this);\n                const val = $input.val();\n                // locate the row\n                const $row = $input.closest('.grid-row');\n                const rowName = $row.attr('data-name');\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n            \n                // call server for default_uom\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Animal Products',\n                        filters: { name: val },\n                        fieldname: 'default_unit_of_measure'\n                    },\n                    callback: function(r) {\n                        const uom = (r && r.message && r.message.default_unit_of_measure) || '';\n                        // find our row and set value\n                        try {\n                            if (grid.grid_rows && grid.grid_rows.length) {\n                                // if single row, it's probably index 0\n                                const gr = grid.grid_rows.find(function(rr) { return rr && rr.wrapper && rr.wrapper.attr && rr.wrapper.attr('data-name') === rowName; }) || grid.grid_rows[0];\n                                if (gr && gr.doc) {\n                                    gr.doc.default_uom = uom;\n                                    if (gr.refresh_field) gr.refresh_field('default_uom');\n                                } else {\n                                    grid.refresh();\n                                }\n                            } else {\n                                grid.refresh();\n                            }\n                        } catch (e) { console.warn('set default_uom failed', e); }\n                    }\n                });\n            });\n\n\n\t\t\t// auto-fill default_uom when animal_product chosen\n\t\t\tdialog.$wrapper.on('awesomplete-selectcomplete', 'input[data-fieldname=\"animal_product\"]', function() {\n\t\t\t\tconst $input = $(this);\n\t\t\t\tconst val = $input.val();\n\t\t\t\tconst $row = $input.closest('.grid-row');\n\t\t\t\tconst rowName = $row.attr('data-name');\n\t\t\t\tconst gridRef = tbl.grid;\n\t\t\t\tif (!gridRef) return;\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\targs: { doctype: 'Animal Products', filters: { name: val }, fieldname: 'default_unit_of_measure' },\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tconst uom = (r && r.message && r.message.default_unit_of_measure) || '';\n\t\t\t\t\t\t// find our single row and set default_uom\n\t\t\t\t\t\tif (gridRef.grid_rows && gridRef.grid_rows.length) {\n\t\t\t\t\t\t\tconst gr = gridRef.grid_rows[0];\n\t\t\t\t\t\t\tif (gr && gr.doc) {\n\t\t\t\t\t\t\t\tgr.doc.default_uom = uom;\n\t\t\t\t\t\t\t\tgr.refresh_field && gr.refresh_field('default_uom');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgridRef.refresh();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Prevent future date on blur\n\t\t\tdialog.$wrapper.on('blur', 'input[data-fieldname=\"date_of_collection\"]', function() {\n\t\t\t\tconst $input = $(this);\n\t\t\t\tconst val = $input.val();\n\t\t\t\tif (!val) return;\n\t\t\t\tconst today = frappe.datetime.get_today();\n\t\t\t\tif (val > today) {\n\t\t\t\t\tfrappe.show_alert({\n\t\t\t\t\t\tmessage: __('Date of Collection cannot be a future date. The value has been reset to today.'),\n\t\t\t\t\t\tindicator: 'orange'\n\t\t\t\t\t}, 5);\n\t\t\t\t\tdialog.set_value('date_of_collection', today);\n\t\t\t\t\t$input.val(today);\n\t\t\t\t\ttry { $input.blur(); } catch (e) {}\n\t\t\t\t}\n\t\t\t});\n\n\t\t}).css({\"color\":\"white\", \"background-color\": \"#14141f\", \"font-weight\": \"800\"}); // <- your requested style\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cattle",
  "enabled": 1,
  "modified": "2025-09-23 14:53:08.030021",
  "module": "Savanna Farm Suite",
  "name": "Collection - Cattle List",
  "script": "// farm_management_system/public/js/cattle_listview.js\nfrappe.listview_settings['Cattle'] = {\n    refresh: function(list_view) {\n        list_view.page.add_inner_button(__('Make Collection'), () => {\n            const dialog = new frappe.ui.Dialog({\n                title: __('Make a Collection of Animal Products'),\n                fields: [\n                    { fieldtype: 'Date', fieldname: 'date_of_collection', label: __('Date of Collection'), default: frappe.datetime.get_today(), reqd: 1 },\n                    { fieldtype: 'Link', fieldname: 'animal', label: __('Specify Animal'), options: 'Animals', default: \"Cattle\", reqd: 1 },\n                    { fieldtype: 'Link', fieldname: 'cattle', label: __('Specify Cow'), options: 'Cattle', description:__('NOTE: Only Use for a single Cow if Applicable.')},\n                    {\n                        fieldtype: 'Table',\n                        fieldname: 'production_table',\n                        label: __('Collections Table'),\n                        description: __('Use this table for <b>Multiple Entries</b>'),\n                        fields: [\n                            { fieldtype: 'Link', fieldname: 'cattle', label: __('Cow'), options: 'Cattle', in_list_view: 1 },\n                            { fieldtype: 'Data', fieldname: 'cattle_nickname', label: __('Nickname'), read_only: 1, in_list_view: 1 },\n                            { fieldtype: 'Link', fieldname: 'animal_product', label: __('Animal Product'), options: 'Animal Products', reqd: 1, in_list_view: 1 },\n                            { fieldtype: 'Data', fieldname: 'default_uom', label: __('Default UOM'), read_only: 1, in_list_view: 1 },\n                            { fieldtype: 'Float', fieldname: 'quantity_collected', label: __('Quantity Collected'), reqd: 1, in_list_view: 1 }\n                        ]\n                    }\n                ],\n                primary_action_label: __('Make Entry'),\n                primary_action: function() {\n                    const dvalues = dialog.get_values(true);\n                    const today = frappe.datetime.get_today();\n                    const selected_date = dvalues && dvalues.date_of_collection;\n                    if (selected_date && selected_date > today) {\n                        // visible alert instead of msgprint\n                        frappe.show_alert({ message: __('Date of Collection cannot be a future date.'), indicator: 'orange' }, 5);\n                        return;\n                    }\n\n                    const rows = dvalues.production_table || [];\n                    if (!rows.length) {\n                        frappe.show_alert({ message: __('No products found to collect.'), indicator: 'orange' }, 5);\n                        return;\n                    }\n\n                    frappe.warn(\n                        __('Are you sure you want to proceed?'),\n                        __('Please Note this Action is Irreversible'),\n                        () => {\n                            frappe.dom.freeze(__('Creating collection...'));\n                            frappe.call({\n                                method: 'farm_management_system.savanna_farm_suite.doctype.cattle.cattle.create_collection_entry',\n                                args: {\n                                    cattle: dvalues.cattle || null,\n                                    date_of_collection: dvalues.date_of_collection,\n                                    rows: rows\n                                },\n                                callback: function(r) {\n                                    frappe.dom.unfreeze();\n                                    if (!r.exc && r.message) {\n                                        frappe.utils.play_sound('success');\n                                        dialog.hide();\n                                        list_view.refresh();\n                                        frappe.show_alert({ message: __('Collection recorded'), indicator: 'green' }, 5);\n                                    } else if (r.exc) {\n                                        const errMsg = (typeof r.exc === 'string') ? r.exc : (r._server_messages || r.exc || __('Unknown error occurred'));\n                                        frappe.show_alert({ message: __('Error: ') + errMsg, indicator: 'red' }, 10);\n                                    }\n                                },\n                                error: function() {\n                                    frappe.dom.unfreeze();\n                                    frappe.show_alert({ message: __('Network Error: Please try again.'), indicator: 'red' }, 10);\n                                }\n                            });\n                        },\n                        'Continue',\n                        true\n                    );\n                }\n            });\n\n            dialog.show();\n            dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n\n            // Helper: apply per-row + top-level query so animal_product only shows products for selected animal\n            function set_product_query_for_animal(animal_name) {\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n\n                const get_query_fn = function() {\n                    if (!animal_name) return { filters: {} };\n                    return { filters: { product_tied_to_which_animal: animal_name } };\n                };\n\n                try {\n                    if (typeof grid.get_field === 'function') {\n                        const topField = grid.get_field('animal_product');\n                        if (topField) {\n                            topField.get_query = get_query_fn;\n                            if (topField.df) topField.df.get_query = get_query_fn;\n                        }\n                    }\n                } catch (e) { console.warn('set_product_query_for_animal top set failed', e); }\n\n                try {\n                    (grid.grid_rows || []).forEach(function(gr) {\n                        try {\n                            const f = gr.fields_map && gr.fields_map.animal_product;\n                            if (f) {\n                                f.get_query = get_query_fn;\n                                if (f.df) f.df.get_query = get_query_fn;\n                                if (gr.doc && gr.doc.animal_product) {\n                                    gr.doc.animal_product = '';\n                                    if (gr.refresh_field) gr.refresh_field('animal_product');\n                                }\n                            }\n                        } catch (inner) { /* ignore per-row errors */ }\n                    });\n                } catch (e) { console.warn('set_product_query_for_animal per-row set failed', e); }\n\n                try { grid.refresh(); } catch (e) {}\n            }\n\n            // Helper: populate rows for all active cattle (has_been_culled == 0)\n            function populate_rows_for_all_cattle() {\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl) return;\n                const grid = tbl.grid;\n\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Cattle',\n                        filters: { has_been_culled: 0 },\n                        fields: ['name', 'add_nickname_optional'],\n                        limit_page_length: 2000\n                    },\n                    callback: function(r) {\n                        if (!r.message || !r.message.length) {\n                            tbl.df.data = [];\n                            if (tbl.grid) tbl.grid.refresh();\n                            frappe.show_alert({ message: __('No active Cattle found'), indicator: 'orange' }, 5);\n                            return;\n                        }\n\n                        const rows = r.message.map(c => ({\n                            cattle: c.name,\n                            cattle_nickname: c.add_nickname_optional || '',\n                            animal_product: '',\n                            default_uom: '',\n                            quantity_collected: 0.0\n                        }));\n\n                        tbl.df.data = rows;\n                        if (grid) grid.refresh();\n\n                        try {\n                            if (grid.grid_rows && grid.grid_rows.length) {\n                                grid.grid_rows.forEach(function(gr) {\n                                    try {\n                                        if (gr.fields_map && gr.fields_map.cattle) {\n                                            gr.fields_map.cattle.df.read_only = 1;\n                                            gr.fields_map.cattle.$input && gr.fields_map.cattle.$input.prop('readonly', true);\n                                        }\n                                        if (gr.fields_map && gr.fields_map.cattle_nickname) {\n                                            gr.fields_map.cattle_nickname.df.read_only = 1;\n                                            gr.fields_map.cattle_nickname.$input && gr.fields_map.cattle_nickname.$input.prop('readonly', true);\n                                        }\n                                        gr.toggle_remove_button && gr.toggle_remove_button(false);\n                                    } catch (e) {}\n                                });\n                            }\n                            dialog.$wrapper.find('.grid-add-row, .grid-add-rows, .grid-row-add').hide();\n                        } catch (e) {\n                            console.warn('Could not lock child rows after cattle populate', e);\n                        }\n\n                        set_product_query_for_animal(dialog.get_value('animal'));\n                    },\n                    error: function() {\n                        frappe.show_alert({ message: __('Failed to fetch Cattle'), indicator: 'red' }, 10);\n                    }\n                });\n            }\n\n            // Populate rows from list of Animal Products (one row per product)\n            function populate_rows_from_products_for_animal(animal) {\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl) return;\n                const grid = tbl.grid;\n\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Animal Products',\n                        filters: { product_tied_to_which_animal: animal },\n                        fields: ['name', 'default_unit_of_measure'],\n                        limit_page_length: 500\n                    },\n                    callback: function(r) {\n                        if (!r.message || !r.message.length) {\n                            tbl.df.data = [];\n                            if (grid) grid.refresh();\n                            frappe.show_alert({ message: __('No products found for selected animal'), indicator: 'orange' }, 5);\n                            return;\n                        }\n\n                        const products = r.message;\n                        const rows = products.map(p => ({\n                            cattle: '',\n                            cattle_nickname: '',\n                            animal_product: p.name,\n                            default_uom: p.default_unit_of_measure || '',\n                            quantity_collected: 0.0\n                        }));\n\n                        tbl.df.data = rows;\n                        if (grid) grid.refresh();\n\n                        dialog.$wrapper.find('.grid-add-row, .grid-add-rows, .grid-row-add').show();\n                        if (grid.grid_rows && grid.grid_rows.length) {\n                            grid.grid_rows.forEach(function(gr) {\n                                try {\n                                    if (gr.fields_map && gr.fields_map.cattle) {\n                                        gr.fields_map.cattle.df.read_only = 0;\n                                        gr.fields_map.cattle.$input && gr.fields_map.cattle.$input.prop('readonly', false);\n                                        gr.toggle_remove_button && gr.toggle_remove_button(true);\n                                    }\n                                    if (gr.fields_map && gr.fields_map.cattle_nickname) {\n                                        gr.fields_map.cattle_nickname.df.read_only = 1;\n                                        gr.fields_map.cattle_nickname.$input && gr.fields_map.cattle_nickname.$input.prop('readonly', true);\n                                    }\n                                } catch (e) {}\n                            });\n                        }\n\n                        set_product_query_for_animal(animal);\n                    },\n                    error: function() {\n                        frappe.show_alert({ message: __('Failed to fetch Animal Products'), indicator: 'red' }, 10);\n                    }\n                });\n            }\n\n            // When animal changes\n            dialog.$wrapper.on('change', 'input[data-fieldname=\"animal\"]', function() {\n                const animal = $(this).val();\n                set_product_query_for_animal(animal);\n\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl) return;\n\n                const is_cattle_animal = ['Cattle', 'Cow'].includes(animal);\n\n                dialog.set_value('cattle', '');\n\n                if (!animal) {\n                    tbl.df.data = [];\n                    if (tbl.grid) tbl.grid.refresh();\n                    return;\n                }\n\n                if (is_cattle_animal) {\n                    populate_rows_for_all_cattle();\n                } else {\n                    populate_rows_from_products_for_animal(animal);\n                }\n            });\n\n            // If user selects a single cow in the top-level cattle field, populate only that cow's row (and fetch nickname)\n            dialog.$wrapper.on('change', 'input[data-fieldname=\"cattle\"]', function() {\n                const selected_cow = $(this).val();\n                const animal = dialog.get_value('animal');\n                if (!selected_cow) return;\n                if (!['Cattle', 'Cow'].includes(animal)) return;\n\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl) return;\n\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: { doctype: 'Cattle', filters: { name: selected_cow }, fieldname: 'add_nickname_optional' },\n                    callback: function(r) {\n                        const nick = (r && r.message && r.message.add_nickname_optional) || '';\n                        tbl.df.data = [{\n                            cattle: selected_cow,\n                            cattle_nickname: nick,\n                            animal_product: '',\n                            default_uom: '',\n                            quantity_collected: 0.0\n                        }];\n                        if (tbl.grid) tbl.grid.refresh();\n\n                        const grid = tbl.grid;\n                        try {\n                            if (grid.grid_rows && grid.grid_rows.length) {\n                                const gr = grid.grid_rows[0];\n                                if (gr && gr.fields_map && gr.fields_map.cattle) {\n                                    gr.fields_map.cattle.df.read_only = 1;\n                                    gr.fields_map.cattle.$input && gr.fields_map.cattle.$input.prop('readonly', true);\n                                    gr.toggle_remove_button && gr.toggle_remove_button(false);\n                                }\n                                if (gr && gr.fields_map && gr.fields_map.cattle_nickname) {\n                                    gr.fields_map.cattle_nickname.df.read_only = 1;\n                                    gr.fields_map.cattle_nickname.$input && gr.fields_map.cattle_nickname.$input.prop('readonly', true);\n                                }\n                            }\n                            dialog.$wrapper.find('.grid-add-row, .grid-add-rows, .grid-row-add').hide();\n                        } catch (e) { console.warn('Could not lock single-cow row', e); }\n\n                        set_product_query_for_animal(animal);\n                    },\n                    error: function() {\n                        frappe.show_alert({ message: __('Failed to fetch cow nickname'), indicator: 'red' }, 10);\n                    }\n                });\n            });\n\n            // When an animal_product link is selected, auto-fill default_uom for that row\n            dialog.$wrapper.on('awesomplete-selectcomplete', 'input[data-fieldname=\"animal_product\"]', function() {\n                const $input = $(this);\n                const val = $input.val();\n                const $row = $input.closest('.grid-row');\n                const rowName = $row.attr('data-name');\n                const tbl = dialog.fields_dict.production_table;\n                if (!tbl || !tbl.grid) return;\n                const grid = tbl.grid;\n\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: { doctype: 'Animal Products', filters: { name: val }, fieldname: 'default_unit_of_measure' },\n                    callback: function(r) {\n                        const uom = (r && r.message && r.message.default_unit_of_measure) || '';\n                        try {\n                            if (grid.grid_rows && grid.grid_rows.length) {\n                                const gr = grid.grid_rows.find(function(rr) { return rr && rr.wrapper && rr.wrapper.attr && rr.wrapper.attr('data-name') === rowName; }) || grid.grid_rows[0];\n                                if (gr && gr.doc) {\n                                    gr.doc.default_uom = uom;\n                                    if (gr.refresh_field) gr.refresh_field('default_uom');\n                                } else {\n                                    grid.refresh();\n                                }\n                            } else {\n                                grid.refresh();\n                            }\n                        } catch (e) { console.warn('set default_uom failed', e); }\n                    }\n                });\n            });\n\n            // Newly added rows pick up the query for current animal\n            dialog.$wrapper.on('click', '.grid-add-row, .grid-add-rows, .grid-row-add', function() {\n                setTimeout(function() {\n                    const animal_val = dialog.get_value('animal');\n                    set_product_query_for_animal(animal_val);\n                }, 50);\n            });\n\n            // Prevent future date on blur — show alert instead of msgprint\n            dialog.$wrapper.on('blur', 'input[data-fieldname=\"date_of_collection\"]', function() {\n                const $input = $(this);\n                const val = $input.val();\n                if (!val) return;\n                const today = frappe.datetime.get_today();\n                if (val > today) {\n                    frappe.show_alert({ message: __('Date of Collection cannot be a future date. The value has been reset to today.'), indicator: 'orange' }, 5);\n                    dialog.set_value('date_of_collection', today);\n                    $input.val(today);\n                    try { $input.blur(); } catch (e) {}\n                }\n            });\n\n            // initialize default queries for initial animal value\n            set_product_query_for_animal(dialog.get_value('animal'));\n            const initial_animal = dialog.get_value('animal');\n            if (['Cattle', 'Cow'].includes(initial_animal)) {\n                populate_rows_for_all_cattle();\n            } else if (initial_animal) {\n                populate_rows_from_products_for_animal(initial_animal);\n            }\n\n        }).addClass('btn-primary');\n    }\n};\n",
  "view": "List"
 }
]