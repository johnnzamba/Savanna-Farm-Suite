[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Poultry Batches",
  "enabled": 1,
  "modified": "2025-09-04 20:35:55.305963",
  "module": "Savanna Farm Suite",
  "name": "Poultry Batch",
  "script": "frappe.ui.form.on('Poultry Batches', {\n    refresh(frm) {\n        // This function is called when the form is refreshed.\n\n        // Clear the existing chart container to prevent duplicates on reload\n        frm.fields_dict.profitability_analysis_for_this_batch.$wrapper.html(\"\");\n\n        // Add containers for the charts\n        frm.fields_dict.profitability_analysis_for_this_batch.$wrapper.html(`\n            <div class=\"frappe-card p-4\">\n                <h4 class=\"mb-4\">Weekly Feed Expense Analysis</h4>\n                <div id=\"feed-expense-chart-container\"></div>\n            </div>\n            <div class=\"frappe-card p-4 mt-4\">\n                <h4 class=\"mb-4\">Weekly Animal Product Stock Value</h4>\n                <div id=\"stock-value-chart-container\"></div>\n            </div>\n        `);\n\n        // Add a loading indicator\n        const expenseChartContainer = document.getElementById('feed-expense-chart-container');\n        const stockChartContainer = document.getElementById('stock-value-chart-container');\n        expenseChartContainer.innerText = 'Loading Expense Data...';\n        stockChartContainer.innerText = 'Loading Stock Value Data...';\n\n        // Call the server-side function to get processed chart data\n        frappe.call({\n            method: \"farm_management_system.savanna_farm_suite.doctype.poultry_batches.poultry_batches.get_profitability_chart_data\",\n            args: {\n                batch_name: frm.doc.name\n            },\n            callback: function(response) {\n                if (response.message) {\n                    const expenseData = response.message.expense_data;\n                    const stockData = response.message.stock_data;\n\n                    // --- Render Expense Chart ---\n                    if (expenseData && expenseData.labels && expenseData.labels.length > 0) {\n                        const expenseChart = new frappe.Chart(\"#feed-expense-chart-container\", {\n                            title: \"Weekly Feed Costs per Feed Type\",\n                            data: expenseData,\n                            type: 'line',\n                            height: 300,\n                            colors: ['#743ee2', '#ff5858', '#00a8ff', '#ffc312', '#2bcbba'],\n                            lineOptions: {\n                                regionFill: 1\n                            }\n                        });\n                    } else {\n                        expenseChartContainer.innerHTML = '<p class=\"text-muted\">No nourishment log data found for this batch to generate expense chart.</p>';\n                    }\n\n                    // --- Render Stock Value Chart ---\n                    if (stockData && stockData.labels && stockData.labels.length > 0) {\n                       const stockValueChart = new frappe.Chart(\"#stock-value-chart-container\", {\n                            title: \"Weekly Stock Value per Animal Product\",\n                            data: stockData,\n                            type: 'line',\n                            height: 300,\n                            colors: ['#ff6b6b', '#feca57', '#48dbfb', '#1dd1a1', '#5f27cd'],\n                             lineOptions: {\n                                regionFill: 0\n                            }\n                        });\n                    } else {\n                         stockChartContainer.innerHTML = '<p class=\"text-muted\">No stock ledger entries found for this batch to generate stock value chart.</p>';\n                    }\n\n                } else {\n                     expenseChartContainer.innerText = 'Failed to load chart data.';\n                     stockChartContainer.innerText = 'Failed to load chart data.';\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Crop Intake",
  "enabled": 1,
  "modified": "2025-09-19 07:09:52.180306",
  "module": "Savanna Farm Suite",
  "name": "Calendar HTML",
  "script": "frappe.ui.form.on(\"Crop Intake\", {\n    refresh(frm) {\n        \n        // Render calendar if the document is saved\n        if (frm.doc.name) {\n            generate_schedule_calendar(frm);\n        }\n    },\n});\n\nfunction generate_schedule_calendar(frm) {\n\tconst wrapper_field = frm.get_field('schedule_calendar');\n\tif (!wrapper_field) return;\n\n\tconst $wrap = wrapper_field.$wrapper;\n\t$wrap.empty();\n\n\tconst rows = (frm.doc.table_biyv || []).filter(r => r.scheduled_date);\n\tif (!rows.length) {\n\t\t$wrap.html('<div class=\"text-muted\">No scheduled activities found to visualize.</div>');\n\t\treturn;\n\t}\n\n\t// HTML escape + newline -> <br>\n\tconst esc = (s) => {\n\t\tif (s === null || s === undefined) return '';\n\t\treturn String(s)\n\t\t\t.replace(/&/g, \"&amp;\")\n\t\t\t.replace(/</g, \"&lt;\")\n\t\t\t.replace(/>/g, \"&gt;\")\n\t\t\t.replace(/\"/g, \"&quot;\")\n\t\t\t.replace(/'/g, \"&#039;\")\n\t\t\t.replace(/\\n/g, \"<br>\");\n\t};\n\n\t// group rows by YYYY-MM-DD\n\tconst groupByDate = {};\n\trows.forEach((r) => {\n\t\tif (!r.scheduled_date) return;\n\t\tlet raw = r.scheduled_date;\n\t\tlet key = String(raw).substr(0, 10); // Assumes YYYY-MM-DD format\n\t\tif (!groupByDate[key]) groupByDate[key] = [];\n\t\tgroupByDate[key].push({\n\t\t\tactivity: r.activity_being_undertaken || '',\n\t\t\tstaff: r.staff_name || '',\n\t\t\trow: r\n\t\t});\n\t});\n\n\t// deterministic \"random\" color per date\n\tfunction hashString(s) {\n\t\tlet h = 2166136261 >>> 0;\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\th ^= s.charCodeAt(i);\n\t\t\th += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);\n\t\t}\n\t\treturn (h >>> 0);\n\t}\n\tfunction colorForKey(key) {\n\t\tconst h = hashString(key) % 360;\n\t\tconst light = 75 - (hashString(key + 'L') % 15);\n\t\tconst sat = 65 + (hashString(key + 'S') % 20);\n\t\treturn `hsl(${h}, ${sat}%, ${light}%)`;\n\t}\n\n\t// container id\n\tconst id = `farm-schedule-calendar-${(Math.random()*1e9|0)}`;\n\n\tconst calendarHTML = `\n\t\t<style>\n\t\t#${id} { font-family: system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial; max-width: 700px; }\n\t\t#${id} .cal-header { display:flex; align-items:center; justify-content:space-between; margin-bottom:8px; }\n\t\t#${id} .cal-nav { cursor:pointer; padding:6px 10px; border-radius:6px; user-select:none; background: #eee; }\n        #${id} .cal-nav:hover { background: #ddd; }\n\t\t#${id} .cal-month { font-weight:600; font-size:1.05rem; }\n\t\t#${id} .cal-grid { display:grid; grid-template-columns:repeat(7,1fr); gap:6px; }\n\t\t#${id} .weekday { text-align:center; font-size:0.8rem; color:#666; padding:6px 0; }\n\t\t#${id} .day { min-height:70px; border-radius:8px; padding:6px; position:relative; background: #f7f7f7; outline: none; }\n\t\t#${id} .day.outside { opacity:0.25; background:transparent; }\n\t\t#${id} .day .date-num { font-weight:600; font-size:0.95rem; display:block; margin-bottom:6px; }\n\t\t#${id} .has-activities { cursor:pointer; box-shadow: inset 0 0 0 2px rgba(0,0,0,0.03); color: #fff; }\n        #${id} .has-activities .date-num { color: #fff; text-shadow: 0 1px 2px rgba(0,0,0,0.2); }\n\t\t#${id} .cal-footer { margin-top:10px; color:#666; font-size:0.85rem; }\n\t\t</style>\n\n\t\t<div id=\"${id}\">\n\t\t\t<div class=\"cal-header\">\n\t\t\t\t<div>\n\t\t\t\t\t<span class=\"cal-nav\" id=\"${id}-prev\" title=\"Previous month\">&#9664;</span>\n\t\t\t\t\t<span class=\"cal-nav\" id=\"${id}-next\" style=\"margin-left:8px;\" title=\"Next month\">&#9654;</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"cal-month\" id=\"${id}-month\"></div>\n\t\t\t\t<div style=\"width:80px\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"cal-grid\" id=\"${id}-weekdays\">\n\t\t\t\t<div class=\"weekday\">Sun</div><div class=\"weekday\">Mon</div><div class=\"weekday\">Tue</div><div class=\"weekday\">Wed</div><div class=\"weekday\">Thu</div><div class=\"weekday\">Fri</div><div class=\"weekday\">Sat</div>\n\t\t\t</div>\n\t\t\t<div class=\"cal-grid\" id=\"${id}-days\" style=\"margin-top:8px;\"></div>\n\t\t\t<div class=\"cal-footer\">Highlighted days have scheduled farm activities. Hover for details.</div>\n\t\t</div>\n\t`;\n\n\t$wrap.append(calendarHTML);\n\n\tlet currentMonth, currentYear;\n\tconst keys = Object.keys(groupByDate);\n\tif (keys.length) {\n\t\tconst sorted = keys.slice().sort();\n\t\tconst first = new Date(sorted[0] + 'T00:00:00');\n\t\tcurrentMonth = first.getMonth();\n\t\tcurrentYear = first.getFullYear();\n\t} else {\n\t\tconst now = new Date();\n\t\tcurrentMonth = now.getMonth();\n\t\tcurrentYear = now.getFullYear();\n\t}\n\n\tconst $monthLabel = $wrap.find(`#${id}-month`);\n\tconst $days = $wrap.find(`#${id}-days`);\n\t$wrap.find(`#${id}-prev`).on('click', () => { currentMonth--; if (currentMonth < 0) { currentMonth = 11; currentYear--; } renderMonth(); });\n\t$wrap.find(`#${id}-next`).on('click', () => { currentMonth++; if (currentMonth > 11) { currentMonth = 0; currentYear++; } renderMonth(); });\n\n\tlet tooltipEl = null;\n\tfunction createTooltip() {\n\t\tif (tooltipEl) return tooltipEl;\n\t\ttooltipEl = document.createElement('div');\n\t\tObject.assign(tooltipEl.style, {\n\t\t\tposition: 'fixed', zIndex: 1061, padding: '10px 12px', borderRadius: '8px',\n\t\t\tbackground: 'rgba(255,255,255,0.98)',\n\t\t\tboxShadow: '0 10px 30px rgba(0,0,0,0.12)', border: '1px solid #ddd',\n\t\t\tmaxWidth: '320px', fontSize: '0.87rem', color: '#111',\n\t\t\tdisplay: 'none', pointerEvents: 'none'\n\t\t});\n\t\tdocument.body.appendChild(tooltipEl);\n\t\treturn tooltipEl;\n\t}\n\tfunction showTooltipFor(dateKey, x, y, activities) {\n\t\tconst el = createTooltip();\n\t\tconst parts = activities.map(a => {\n\t\t\treturn `<div style=\"margin-bottom:6px; padding-bottom:6px; border-bottom:1px solid #eee; font-size: 13px;\">\n                        <div><strong>Nature of Activity:</strong> ${esc(a.activity)}</div>\n                        <div><strong>Assigned To:</strong> ${esc(a.staff)}</div>\n                    </div>`;\n\t\t}).join('');\n\t\tel.innerHTML = parts.slice(0, -1) || '<div style=\"opacity:0.7\">No details</div>'; // remove last border\n\t\tel.style.display = 'block';\n\t\tpositionTooltip(x, y, el);\n\t}\n\tfunction hideTooltip() {\n\t\tif (tooltipEl) tooltipEl.style.display = 'none';\n\t}\n\tfunction positionTooltip(clientX, clientY, el) {\n\t\tif (!el) el = tooltipEl;\n\t\tconst pad = 12;\n\t\tconst rect = el.getBoundingClientRect();\n\t\tconst vw = window.innerWidth;\n\t\tconst vh = window.innerHeight;\n\t\tlet left = clientX + 12;\n\t\tlet top = clientY + 16;\n\t\tif (left + rect.width + pad > vw) left = clientX - rect.width - 12;\n\t\tif (top + rect.height + pad > vh) top = clientY - rect.height - 12;\n\t\tel.style.left = `${Math.max(pad, left)}px`;\n\t\tel.style.top = `${Math.max(pad, top)}px`;\n\t}\n\n\tfunction attachDayHandlers($container) {\n\t\t$container.off('.farmCal').on('mouseenter.farmCal', '.has-activities', function (ev) {\n\t\t\tconst dateKey = $(this).data('date-key');\n\t\t\tif (!dateKey || !groupByDate[dateKey]) return;\n\t\t\tshowTooltipFor(dateKey, ev.clientX, ev.clientY, groupByDate[dateKey]);\n\t\t\tconst moveHandler = (e) => positionTooltip(e.clientX, e.clientY);\n\t\t\t$(document).on('mousemove.farmCal', moveHandler);\n\t\t\t$(this).data('farmCal_moveHandler', moveHandler);\n\t\t}).on('mouseleave.farmCal', '.has-activities', function () {\n\t\t\tconst moveHandler = $(this).data('farmCal_moveHandler');\n\t\t\tif (moveHandler) $(document).off('mousemove.farmCal', moveHandler);\n\t\t\thideTooltip();\n\t\t});\n\t}\n\n\tfunction pad(n) { return String(n).padStart(2,'0'); }\n\tfunction dateKeyFromYMD(y,m,d) { return `${y}-${pad(m)}-${pad(d)}`; }\n\n\tfunction renderMonth() {\n\t\tconst monthNames = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n\t\t$monthLabel.text(`${monthNames[currentMonth]} ${currentYear}`);\n\t\t$days.empty();\n\n\t\tconst firstWeekday = new Date(currentYear, currentMonth, 1).getDay();\n\t\tconst daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n\n\t\tfor (let i = 0; i < firstWeekday; i++) $days.append(`<div class=\"day outside\"></div>`);\n\n\t\tfor (let d = 1; d <= daysInMonth; d++) {\n\t\t\tconst key = dateKeyFromYMD(currentYear, currentMonth + 1, d);\n\t\t\tconst activities = groupByDate[key] || [];\n\t\t\tconst has = !!activities.length;\n\t\t\tconst $day = $(`<div class=\"day ${has ? 'has-activities' : ''}\" data-date-key=\"${key}\"></div>`);\n\t\t\t$day.append(`<span class=\"date-num\">${d}</span>`);\n\t\t\tif (has) {\n\t\t\t\t$day.css('background', colorForKey(key));\n\t\t\t\tconst preview = esc((activities[0] && activities[0].activity) || '');\n\t\t\t\t$day.append(`<div style=\"font-size:0.78rem;opacity:0.9;max-height:40px;overflow:hidden\">${preview}</div>`);\n\t\t\t}\n\t\t\t$days.append($day);\n\t\t}\n\n\t\tconst totalCells = firstWeekday + daysInMonth;\n\t\tconst trailing = (7 - (totalCells % 7)) % 7;\n\t\tfor (let i = 0; i < trailing; i++) $days.append(`<div class=\"day outside\"></div>`);\n\t\t\n\t\tattachDayHandlers($days);\n\t}\n\n\trenderMonth();\n\n    // Re-render calendar if child table data changes\n\ttry {\n\t\tconst tableWrapper = frm.get_field('table_biyv').$wrapper.get(0);\n\t\tif (tableWrapper && !tableWrapper._farm_calendar_observer) {\n\t\t\tconst mo = new MutationObserver(() => {\n\t\t\t\tif (tableWrapper._farm_calendar_timer) clearTimeout(tableWrapper._farm_calendar_timer);\n\t\t\t\ttableWrapper._farm_calendar_timer = setTimeout(() => {\n\t\t\t\t\tgenerate_schedule_calendar(frm);\n\t\t\t\t}, 250);\n\t\t\t});\n\t\t\tmo.observe(tableWrapper, { childList: true, subtree: true });\n\t\t\ttableWrapper._farm_calendar_observer = mo;\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('Farm calendar observer error', e);\n\t}\n}\n\nfrappe.ui.form.on('Crop Intake Schedule table', {\n    refresh(frm) {\n        // Ensure the button is properly set up\n    },\n    review_schedule(frm, cdt, cdn) {\n        // Get the current row's data\n        let row = locals[cdt][cdn];\n        \n        // Fetch the referenced_schedule_document value\n        let schedule_doc = row.referenced_schedule_document;\n        \n        // Check if referenced_schedule_document exists\n        if (schedule_doc) {\n            // Redirect to the Farm Activity Schedule document\n            frappe.set_route(\"Form\", \"Farm Activity Schedule\", schedule_doc);\n        } else {\n            // Show an alert if no document is referenced\n            frappe.msgprint({\n                title: __(\"Missing Reference\"),\n                indicator: \"red\",\n                message: __(\"No referenced schedule document found in this row.\")\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Crop Intake",
  "enabled": 1,
  "modified": "2025-09-20 20:25:25.248793",
  "module": "Savanna Farm Suite",
  "name": "Process Farming Activity",
  "script": "// Initialize global variables for farm activity recording\nwindow.farmActivityCache = {};\nwindow.activityCalendarDialog = null;\nwindow.scheduledDatesCache = {};\n\n// Add CSS styles for the activity calendar\nfunction addActivityCalendarStyles() {\n    const style = document.createElement('style');\n    style.textContent = `\n        .activity-calendar {\n            display: inline-block;\n            width: 100%;\n            border: 1px solid #d1d8dd;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n\n        .activity-calendar-weekdays {\n            display: grid;\n            grid-template-columns: repeat(7, 1fr);\n            background-color: #f5f7fa;\n            font-weight: bold;\n            text-align: center;\n        }\n\n        .activity-calendar-weekdays div {\n            padding: 8px;\n            border-right: 1px solid #d1d8dd;\n        }\n\n        .activity-calendar-weekdays div:last-child {\n            border-right: none;\n        }\n\n        .activity-calendar-days {\n            display: grid;\n            grid-template-columns: repeat(7, 1fr);\n        }\n\n        .activity-calendar-day {\n            padding: 8px;\n            min-height: 60px;\n            border-right: 1px solid #d1d8dd;\n            border-bottom: 1px solid #d1d8dd;\n            cursor: pointer;\n            text-align: center;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n\n        .activity-calendar-day:nth-child(7n) {\n            border-right: none;\n        }\n\n        .activity-calendar-day.empty {\n            background-color: #fafbfc;\n            cursor: default;\n        }\n\n        .activity-calendar-day:hover:not(.empty) {\n            background-color: #e3f2fd;\n            transform: scale(1.05);\n        }\n\n        /* Unique colors for scheduled dates */\n        .activity-calendar-day.scheduled-1 {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-2 {\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-3 {\n            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-4 {\n            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-5 {\n            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-day.scheduled-6 {\n            background: linear-gradient(135deg, #30cfd0 0%, #330867 100%);\n            color: white;\n            font-weight: bold;\n        }\n\n        .activity-calendar-header {\n            text-align: center;\n            margin-bottom: 10px;\n            font-size: 18px;\n            font-weight: bold;\n            color: #36414C;\n            padding: 10px;\n            background: #f5f7fa;\n            border-radius: 4px;\n        }\n\n        .activity-calendar-navigation {\n            margin-top: 15px;\n            text-align: center;\n        }\n\n        .activity-calendar-navigation button {\n            margin: 0 5px;\n        }\n\n        .scheduled-activity-indicator {\n            position: absolute;\n            bottom: 2px;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: 10px;\n            padding: 2px 6px;\n            background: rgba(0,0,0,0.3);\n            border-radius: 10px;\n            color: white;\n        }\n\n        .farm-inputs-table {\n            margin-top: 15px;\n        }\n\n        .farm-inputs-table .grid-row {\n            margin-bottom: 10px;\n            padding: 10px;\n            background: #f9f9f9;\n            border-radius: 4px;\n        }\n\n        .legend-container {\n            margin: 15px 0;\n            padding: 10px;\n            background: #f9f9f9;\n            border-radius: 4px;\n        }\n\n        .legend-item {\n            display: inline-block;\n            margin-right: 15px;\n            margin-bottom: 5px;\n        }\n\n        .legend-color {\n            width: 20px;\n            height: 20px;\n            display: inline-block;\n            border-radius: 3px;\n            vertical-align: middle;\n            margin-right: 5px;\n        }\n        .insufficient-stock-row {\n            border-color: #e74c3c !important;\n            background: #fff6f6;\n        }\n\n    `;\n    document.head.appendChild(style);\n}\n\nfrappe.ui.form.on(\"Crop Intake\", {\n    refresh(frm) {\n        if (!frm.is_new()) {\n            frm.add_custom_button(__('Record Farming Activity'), function() {\n                if (frm.is_new()) {\n                    frappe.msgprint(__('Please save the document before recording activities.'));\n                    return;\n                }\n                \n                // Initialize or clear cache\n                window.farmActivityCache = {};\n                \n                // Add styles if not already added\n                if (!document.querySelector('style[data-activity-calendar-styles]')) {\n                    addActivityCalendarStyles();\n                    document.querySelector('style').setAttribute('data-activity-calendar-styles', 'true');\n                }\n                \n                // Open the activity calendar\n                openActivityCalendar(frm);\n                \n            }, __('Action')).addClass('btn-warning');\n        }\n    }\n});\n\n// Function to open the activity recording calendar\nfunction openActivityCalendar(frm) {\n    let currentDate = new Date();\n    let currentMonth = currentDate.getMonth();\n    let currentYear = currentDate.getFullYear();\n    \n    // Create dialog with calendar\n    let dialog = new frappe.ui.Dialog({\n        title: __('Record Farming Activity - ' + frm.doc.name),\n        size: 'extra-large',\n        fields: [\n            {\n                fieldtype: 'HTML',\n                fieldname: 'calendar_container'\n            }\n        ]\n    });\n    \n    window.activityCalendarDialog = dialog;\n    \n    // Load scheduled dates from table_biyv\n    loadScheduledDates(frm, function() {\n        // Generate calendar after loading scheduled dates\n        generateActivityCalendar(dialog, currentMonth, currentYear, frm);\n        addActivityCalendarNavigation(dialog, currentMonth, currentYear, frm);\n    });\n    \n    dialog.show();\n}\n\n// Function to load scheduled dates from table_biyv - FIXED VERSION\nfunction loadScheduledDates(frm, callback) {\n    // Clear the cache first\n    window.scheduledDatesCache = {};\n    \n    // Fetch scheduled dates from the table_biyv using a direct database query\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Farm Activity Schedule',\n            filters: {\n                activity_tied_to_which_crop_batch: frm.doc.name\n            },\n            fields: ['name']\n        },\n        callback: function(r) {\n            if (r.message && r.message.length > 0) {\n                // Get all schedule documents\n                const scheduleNames = r.message.map(item => item.name);\n                \n                // Use a server-side method to get all child table data at once\n                frappe.call({\n                    method: 'farm_management_system.savanna_farm_suite.doctype.crop_intake.crop_intake.get_scheduled_activities',\n                    args: {\n                        schedule_names: scheduleNames\n                    },\n                    callback: function(res) {\n                        if (res.message) {\n                            res.message.forEach((row, index) => {\n                                if (row.scheduled_date) {\n                                    window.scheduledDatesCache[row.scheduled_date] = {\n                                        index: (index % 6) + 1,\n                                        activity: row.activity_being_undertaken || 'Scheduled Activity',\n                                        description: row.status || '',\n                                        assignees: row.staff_name || ''\n                                    };\n                                }\n                            });\n                        }\n                        callback();\n                    }\n                });\n            } else {\n                callback();\n            }\n        }\n    });\n}\n\n// Function to generate activity calendar\nfunction generateActivityCalendar(dialog, month, year, frm) {\n    let firstDay = new Date(year, month, 1);\n    let lastDay = new Date(year, month + 1, 0);\n    let daysInMonth = lastDay.getDate();\n    let startingDay = firstDay.getDay();\n    \n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    \n    // Create calendar HTML with legend\n    let calendarHTML = `\n        <div class=\"activity-calendar-header\">\n            <h3>${monthNames[month]} ${year}</h3>\n        </div>\n        <div class=\"legend-container\">\n            <strong>Click on any set date in the calendar to record Farming Activity.</strong><br>\n        </div>\n        <div class=\"activity-calendar\">\n            <div class=\"activity-calendar-weekdays\">\n                <div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>\n            </div>\n            <div class=\"activity-calendar-days\">\n    `;\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDay; i++) {\n        calendarHTML += `<div class=\"activity-calendar-day empty\"></div>`;\n    }\n    \n    // Add cells for each day of the month\n    for (let i = 1; i <= daysInMonth; i++) {\n        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;\n        const scheduledData = window.scheduledDatesCache[dateStr];\n        const scheduledClass = scheduledData ? ` scheduled-${scheduledData.index}` : '';\n        const title = scheduledData ? `title=\"${scheduledData.activity} - ${scheduledData.assignees}\"` : '';\n        \n        calendarHTML += `\n            <div class=\"activity-calendar-day${scheduledClass}\" data-date=\"${dateStr}\" ${title}>\n                <div style=\"font-size: 16px; margin-bottom: 5px;\">${i}</div>\n                ${scheduledData ? `<div class=\"scheduled-activity-indicator\">${scheduledData.activity.substring(0, 10)}...</div>` : ''}\n            </div>\n        `;\n    }\n    \n    calendarHTML += `</div></div>`;\n    \n    // Set calendar HTML\n    dialog.fields_dict.calendar_container.$wrapper.html(calendarHTML);\n    \n    // Add click event to each day\n    dialog.$wrapper.find('.activity-calendar-day:not(.empty)').on('click', function() {\n        const date = $(this).data('date');\n        openActivityRecordDialog(date, frm, dialog);\n    });\n}\n\n// Function to add navigation to activity calendar\nfunction addActivityCalendarNavigation(dialog, month, year, frm) {\n    const navHTML = `\n        <div class=\"activity-calendar-navigation\">\n            <button class=\"btn btn-default prev-month\">\n                <i class=\"fa fa-chevron-left\"></i> Previous Month\n            </button>\n            <button class=\"btn btn-default today-btn\">\n                Today\n            </button>\n            <button class=\"btn btn-default next-month\">\n                Next Month <i class=\"fa fa-chevron-right\"></i>\n            </button>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.activity-calendar-header').after(navHTML);\n    \n    // Previous month handler\n    dialog.$wrapper.find('.prev-month').on('click', function() {\n        let newMonth = month - 1;\n        let newYear = year;\n        if (newMonth < 0) {\n            newMonth = 11;\n            newYear = year - 1;\n        }\n        generateActivityCalendar(dialog, newMonth, newYear, frm);\n        addActivityCalendarNavigation(dialog, newMonth, newYear, frm);\n    });\n    \n    // Next month handler\n    dialog.$wrapper.find('.next-month').on('click', function() {\n        let newMonth = month + 1;\n        let newYear = year;\n        if (newMonth > 11) {\n            newMonth = 0;\n            newYear = year + 1;\n        }\n        generateActivityCalendar(dialog, newMonth, newYear, frm);\n        addActivityCalendarNavigation(dialog, newMonth, newYear, frm);\n    });\n    \n    // Today button handler\n    dialog.$wrapper.find('.today-btn').on('click', function() {\n        let today = new Date();\n        generateActivityCalendar(dialog, today.getMonth(), today.getFullYear(), frm);\n        addActivityCalendarNavigation(dialog, today.getMonth(), today.getFullYear(), frm);\n    });\n}\n\n// Function to open activity record dialog - REFINED WITH DROPDOWNS\nfunction openActivityRecordDialog(date, frm, parentDialog) {\n    let farmInputsData = [];\n    let labourersData = [];\n    let activitiesData = [];\n    \n    // Create dialog with sections for adding rows\n    let activityDialog = new frappe.ui.Dialog({\n        title: __(`Record Activity for ${frappe.datetime.str_to_user(date)}`),\n        size: 'large',\n        fields: [\n            {\n                fieldname: 'labourers_section',\n                fieldtype: 'Section Break',\n                label: __('Labourers Involved')\n            },\n            {\n                fieldname: 'labourers_html',\n                fieldtype: 'HTML'\n            },\n            {\n                fieldname: 'activities_section',\n                fieldtype: 'Section Break',\n                label: __('Farming Activities Undertaken')\n            },\n            {\n                fieldname: 'activities_html',\n                fieldtype: 'HTML'\n            },\n            {\n                fieldname: 'total_man_hours',\n                fieldtype: 'Float',\n                label: __('Total Man Hours used in this Activity'),\n                reqd: 1,\n                default: 0\n            },\n            {\n                fieldname: 'auto_create_vouchers',\n                fieldtype: 'Check',\n                label: __('Auto-Create Payment Vouchers for ALL Labourers?'),\n                default: 0,\n                description: 'Please Note: Payment Vouchers will be created based on Wage set for each worker.'\n            },\n            {\n                fieldname: 'additional_notes',\n                fieldtype: 'Small Text',\n                label: __('Additional Notes')\n            },\n            {\n                fieldname: 'proof_of_work',\n                fieldtype: 'Attach',\n                label: __('Proof of Work')\n            },\n            {\n                fieldname: 'section_break_1',\n                fieldtype: 'Section Break',\n                label: __('Farm Inputs Used')\n            },\n            {\n                fieldname: 'farm_inputs_html',\n                fieldtype: 'HTML'\n            }\n        ],\n        primary_action_label: __('Record Log'),\n        primary_action: function() {\n            let values = activityDialog.get_values();\n            \n            // Validate required fields\n            if (labourersData.length === 0) {\n                frappe.msgprint(__('Please add at least one labourer'));\n                return;\n            }\n            \n            if (activitiesData.length === 0) {\n                frappe.msgprint(__('Please add at least one farming activity'));\n                return;\n            }\n            \n            // Confirmation dialog\n            frappe.confirm(\n                __('Are you sure you want to record this farming activity log?'),\n                function() {\n                    // Prepare data for server\n                    let activityData = {\n                        selected_date: date,\n                        crop_intake: frm.doc.name,\n                        farming_season: frm.doc.farming_season,\n                        plot: frm.doc.plot_on_which_planting_is_done,\n                        crop: frm.doc.crop_being_planted,\n                        total_man_hours: values.total_man_hours,\n                        farming_activities: activitiesData.map(a => a.activity),\n                        additional_notes: values.additional_notes || '',\n                        labourers: labourersData.map(l => l.labourer),\n                        proof_of_work: values.proof_of_work || '',\n                        auto_create_vouchers: values.auto_create_vouchers,\n                        farm_inputs: farmInputsData\n                    };\n                    \n                    // Call server-side method\n                    frappe.call({\n                        method: 'farm_management_system.savanna_farm_suite.doctype.crop_intake.crop_intake.create_farm_operation_log',\n                        args: {\n                            data: activityData\n                        },\n                        freeze: true,\n                        freeze_message: __('Creating Farm Operation Log...'),\n                        callback: function(r) {\n                            if (r.message) {\n                                let msg = __('Farm Operation Log {0} created successfully', [r.message.farm_log]);\n                                if (r.message.vouchers && r.message.vouchers.length) {\n                                    msg += __(' and Petty Cash Vouchers: {0}', [r.message.vouchers.join(', ')]);\n                                }\n                                frappe.show_alert({\n                                    message: msg,\n                                    indicator: 'green'\n                                });\n                                \n                                frappe.utils.play_sound('success');\n                                activityDialog.hide();\n                                \n                                // Optionally refresh the parent form\n                                frm.reload_doc();\n                            }\n                        },\n                        error: function(r) {\n                            frappe.msgprint(__('Error creating Farm Operation Log: {0}', [r.message]));\n                        }\n                    });\n                }\n            );\n        }\n    });\n    \n    // Fetch options for dropdowns\n    let employeeList = [];\n    let activityList = [];\n    let inputList = [];\n    \n    const empPromise = new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Employee',\n                fields: ['name', 'employee_name'],\n                limit: 0,\n                ignore_permissions: true\n            },\n            callback: function(r) {\n                employeeList = r.message || [];\n                resolve();\n            },\n            error: reject\n        });\n    });\n    \n    const actPromise = new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Crop Activity',\n                fields: ['name'],\n                limit: 0,\n                ignore_permissions: true\n            },\n            callback: function(r) {\n                activityList = r.message || [];\n                resolve();\n            },\n            error: reject\n        });\n    });\n    \n    const inputPromise = new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Farm Inputs',\n                fields: ['name', 'uom'],\n                limit: 0,\n                ignore_permissions: true\n            },\n            callback: function(r) {\n                inputList = r.message || [];\n                resolve();\n            },\n            error: reject\n        });\n    });\n    \n    Promise.all([empPromise, actPromise, inputPromise]).then(() => {\n        // Setup labourers table\n        activityDialog.fields_dict.labourers_html.$wrapper.html(`\n            <div class=\"labourers-container\">\n                <button class=\"btn btn-sm btn-default add-labourer-btn\">\n                    <i class=\"fa fa-plus\"></i> Add Labourer\n                </button>\n                <div class=\"labourers-list\" style=\"margin-top: 10px;\"></div>\n            </div>\n        `);\n        \n        activityDialog.$wrapper.find('.add-labourer-btn').on('click', function() {\n            addLabourerRow(activityDialog, labourersData, employeeList);\n        });\n        \n        // Setup activities table\n        activityDialog.fields_dict.activities_html.$wrapper.html(`\n            <div class=\"activities-container\">\n                <button class=\"btn btn-sm btn-default add-activity-btn\">\n                    <i class=\"fa fa-plus\"></i> Add Activity\n                </button>\n                <div class=\"activities-list\" style=\"margin-top: 10px;\"></div>\n            </div>\n        `);\n        \n        activityDialog.$wrapper.find('.add-activity-btn').on('click', function() {\n            addActivityRow(activityDialog, activitiesData, activityList);\n        });\n        \n        // Setup farm inputs table\n        activityDialog.fields_dict.farm_inputs_html.$wrapper.html(`\n            <div class=\"farm-inputs-container\">\n                <button class=\"btn btn-sm btn-default add-input-btn\">\n                    <i class=\"fa fa-plus\"></i> Add Farm Input\n                </button>\n                <div class=\"farm-inputs-list\" style=\"margin-top: 10px;\"></div>\n            </div>\n        `);\n        \n        activityDialog.$wrapper.find('.add-input-btn').on('click', function() {\n            addFarmInputRow(activityDialog, farmInputsData, inputList);\n        });\n        \n        activityDialog.show();\n    }).catch(() => {\n        frappe.msgprint(__('Error loading options. Please try again.'));\n    });\n}\n\n// Function to add labourer row with dropdown\nfunction addLabourerRow(dialog, labourersData, employeeList) {\n    const rowId = frappe.utils.get_random(5);\n    const rowData = {\n        id: rowId,\n        labourer: '',\n        labourer_name: ''\n    };\n    \n    labourersData.push(rowData);\n    \n    const rowHTML = `\n        <div class=\"labourer-row\" data-row-id=\"${rowId}\" style=\"border: 1px solid #d1d8dd; padding: 10px; margin-bottom: 10px; border-radius: 4px;\">\n            <div class=\"row\">\n                <div class=\"col-md-10\">\n                    <div class=\"form-group\">\n                        <label>Labourer</label>\n                        <select class=\"form-control labourer-select\">\n                            <option value=\"\" disabled selected>Select Labourer</option>\n                            ${employeeList.map(d => `<option value=\"${d.name}\" data-employee-name=\"${d.employee_name || d.name}\">${d.employee_name || d.name}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <button class=\"btn btn-sm btn-danger remove-row-btn\" style=\"margin-top: 25px;\">\n                        <i class=\"fa fa-times\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.labourers-list').append(rowHTML);\n    \n    const $row = dialog.$wrapper.find(`[data-row-id=\"${rowId}\"]`);\n    \n    $row.find('.labourer-select').on('change', function() {\n        const select = this;\n        const val = select.value;\n        const opt = select.options[select.selectedIndex];\n        const name = opt ? opt.dataset.employeeName : '';\n        const row = labourersData.find(r => r.id === rowId);\n        if (row) {\n            row.labourer = val;\n            row.labourer_name = name;\n        }\n    });\n    \n    // Remove row handler\n    $row.find('.remove-row-btn').on('click', function() {\n        $row.remove();\n        const index = labourersData.findIndex(r => r.id === rowId);\n        if (index > -1) {\n            labourersData.splice(index, 1);\n        }\n    });\n}\n\n// Function to add activity row with dropdown\nfunction addActivityRow(dialog, activitiesData, activityList) {\n    const rowId = frappe.utils.get_random(5);\n    const rowData = {\n        id: rowId,\n        activity: ''\n    };\n    \n    activitiesData.push(rowData);\n    \n    const rowHTML = `\n        <div class=\"activity-row\" data-row-id=\"${rowId}\" style=\"border: 1px solid #d1d8dd; padding: 10px; margin-bottom: 10px; border-radius: 4px;\">\n            <div class=\"row\">\n                <div class=\"col-md-10\">\n                    <div class=\"form-group\">\n                        <label>Farming Activity</label>\n                        <select class=\"form-control activity-select\">\n                            <option value=\"\" disabled selected>Select Activity</option>\n                            ${activityList.map(d => `<option value=\"${d.name}\">${d.name}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <button class=\"btn btn-sm btn-danger remove-row-btn\" style=\"margin-top: 25px;\">\n                        <i class=\"fa fa-times\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.activities-list').append(rowHTML);\n    \n    const $row = dialog.$wrapper.find(`[data-row-id=\"${rowId}\"]`);\n    \n    $row.find('.activity-select').on('change', function() {\n        const val = this.value;\n        const row = activitiesData.find(r => r.id === rowId);\n        if (row) {\n            row.activity = val;\n        }\n    });\n    \n    // Remove row handler\n    $row.find('.remove-row-btn').on('click', function() {\n        $row.remove();\n        const index = activitiesData.findIndex(r => r.id === rowId);\n        if (index > -1) {\n            activitiesData.splice(index, 1);\n        }\n    });\n}\n\n// Function to add farm input row with dropdown + Current Stock column\nfunction addFarmInputRow(dialog, farmInputsData, inputList) {\n    const rowId = frappe.utils.get_random(5);\n    const rowData = {\n        id: rowId,\n        farm_input: '',\n        uom: '',\n        quantity: 0,\n        current_stock: 0\n    };\n    \n    farmInputsData.push(rowData);\n    \n    const rowHTML = `\n        <div class=\"farm-input-row\" data-row-id=\"${rowId}\" style=\"border: 1px solid #d1d8dd; padding: 10px; margin-bottom: 10px; border-radius: 4px;\">\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <label>Farm Input Used</label>\n                        <select class=\"form-control farm-input-select\" data-fieldname=\"farm_input\">\n                            <option value=\"\" disabled selected>Select Farm Input</option>\n                            ${inputList.map(d => `<option value=\"${d.name}\" data-uom=\"${d.uom || ''}\">${d.name}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <label>Default UOM</label>\n                        <input type=\"text\" class=\"form-control uom-field\" data-fieldname=\"uom\" readonly>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"form-group\">\n                        <label>Quantity Used</label>\n                        <input type=\"number\" class=\"form-control quantity-field\" data-fieldname=\"quantity\" step=\"0.01\">\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"form-group\">\n                        <label>Current Stock</label>\n                        <input type=\"text\" class=\"form-control current-stock-field\" data-fieldname=\"current_stock\" readonly>\n                        <small class=\"stock-warning text-danger\" style=\"display:none;\">Requested qty > Current stock</small>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <button class=\"btn btn-sm btn-danger remove-row-btn\" style=\"margin-top: 25px;\">\n                        <i class=\"fa fa-times\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    dialog.$wrapper.find('.farm-inputs-list').append(rowHTML);\n    \n    // Setup farm input select\n    const $row = dialog.$wrapper.find(`[data-row-id=\"${rowId}\"]`);\n    \n    $row.find('.farm-input-select').on('change', function() {\n        const select = this;\n        const val = select.value;\n        const opt = select.options[select.selectedIndex];\n        const uom = opt ? opt.dataset.uom : '';\n        $row.find('.uom-field').val(uom);\n        const row = farmInputsData.find(r => r.id === rowId);\n        if (row) {\n            row.farm_input = val;\n            row.uom = uom;\n            row.current_stock = 0; // reset while fetching\n            $row.find('.current-stock-field').val('');\n            $row.removeClass('insufficient-stock-row');\n            $row.find('.stock-warning').hide();\n        }\n\n        // Call server to get current stock for selected input\n        if (val) {\n            frappe.call({\n                method: 'farm_management_system.savanna_farm_suite.doctype.crop_seedlings.crop_seedlings.get_current_stock',\n                args: { item_code: val },\n                freeze: false,\n                callback: function(res) {\n                    if (res && res.message) {\n                        const stock_info = res.message;\n                        const qty_after = parseFloat(stock_info.qty_after_transaction) || 0;\n                        // set UI and data\n                        $row.find('.current-stock-field').val(qty_after);\n                        const row = farmInputsData.find(r => r.id === rowId);\n                        if (row) {\n                            row.current_stock = qty_after;\n                            // If quantity already entered and exceeds stock, show inline warning\n                            const enteredQty = parseFloat($row.find('.quantity-field').val()) || 0;\n                            if (enteredQty > qty_after) {\n                                $row.addClass('insufficient-stock-row');\n                                $row.find('.stock-warning').show();\n                            } else {\n                                $row.removeClass('insufficient-stock-row');\n                                $row.find('.stock-warning').hide();\n                            }\n                        }\n                    } else {\n                        // No message or failure — leave as blank/0\n                        $row.find('.current-stock-field').val('');\n                    }\n                },\n                error: function() {\n                    // failure — ignore, but leave empty\n                    $row.find('.current-stock-field').val('');\n                }\n            });\n        }\n    });\n    \n    // Handle quantity change\n    $row.find('.quantity-field').on('input change', function() {\n        const row = farmInputsData.find(r => r.id === rowId);\n        const entered = parseFloat($(this).val()) || 0;\n        if (row) {\n            row.quantity = entered;\n            // check against current_stock (if available)\n            const avail = parseFloat(row.current_stock) || 0;\n            if (avail && entered > avail) {\n                $row.addClass('insufficient-stock-row');\n                $row.find('.stock-warning').show();\n            } else {\n                $row.removeClass('insufficient-stock-row');\n                $row.find('.stock-warning').hide();\n            }\n        }\n    });\n    \n    // Remove row handler\n    $row.find('.remove-row-btn').on('click', function() {\n        $row.remove();\n        const index = farmInputsData.findIndex(r => r.id === rowId);\n        if (index > -1) {\n            farmInputsData.splice(index, 1);\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Crop Intake",
  "enabled": 1,
  "modified": "2025-09-21 01:12:34.033061",
  "module": "Savanna Farm Suite",
  "name": "Render Chart",
  "script": "frappe.ui.form.on('Crop Intake', {\n    refresh(frm) {\n        // Wrap chart generation in a timeout to prevent rendering errors\n        // This gives the DOM time to draw the container for the chart\n        setTimeout(() => {\n            const wrapper = frm.get_field(\"farm_input_usage_trend\").$wrapper;\n            wrapper.empty();\n\n            const source_data = frm.doc.table_voqq;\n\n            if (!source_data || source_data.length === 0) {\n                wrapper.html(`<div class=\"text-muted text-center\" style=\"padding: 2rem;\">\n                    No farm input usage data to display.\n                </div>`);\n                return;\n            }\n\n            // 1. Process and Aggregate Data\n            let data_by_date = {};\n            let uom_lookup = {};\n            let all_agents = new Set();\n\n            source_data.forEach(d => {\n                if (!d.date_of_use || !d.farming_agent_used || !d.quantity_of_farming_agent_used) {\n                    return;\n                }\n\n                if (!data_by_date[d.date_of_use]) {\n                    data_by_date[d.date_of_use] = {};\n                    uom_lookup[d.date_of_use] = {};\n                }\n\n                const current_qty = data_by_date[d.date_of_use][d.farming_agent_used] || 0;\n                data_by_date[d.date_of_use][d.farming_agent_used] = current_qty + d.quantity_of_farming_agent_used;\n\n                // Important: This relies on 'd.agents_uom' having a value\n                uom_lookup[d.date_of_use][d.farming_agent_used] = d.agents_uom;\n\n                all_agents.add(d.farming_agent_used);\n            });\n            \n            // **DEBUGGING STEP**: Check your browser's console (F12) for this output\n            // It will show you if the UOMs are being captured correctly.\n            console.log(\"UOM Lookup Table:\", uom_lookup);\n\n            // 2. Prepare Data for Frappe Charts\n            const sorted_agents = Array.from(all_agents).sort();\n            const labels = Object.keys(data_by_date).sort((a, b) => new Date(a) - new Date(b));\n\n            const datasets = sorted_agents.map(agent => {\n                return {\n                    name: agent,\n                    values: labels.map(date => data_by_date[date][agent] || 0)\n                };\n            });\n\n            // 3. Render the Chart\n            new frappe.Chart(wrapper[0], {\n                title: \"Farm Input Usage Trend\",\n                data: {\n                    labels: labels,\n                    datasets: datasets\n                },\n                type: 'bar',\n                height: 300,\n                colors: ['#743EE2', '#2E93fA', '#66DA26', '#E91E63', '#FF9800'],\n                barOptions: {\n                    stacked: 1\n                },\n                tooltipOptions: {\n                    format: (points) => {\n                        if (!points || points.length === 0) return;\n\n                        const point = points[0];\n                        const date_label = frappe.datetime.str_to_user(point.label);\n\n                        let tooltip_html = `<div class=\"graph-tooltip-title\">${date_label}</div>\n                                            <ul class=\"tooltip-list\">`;\n\n                        points.filter(p => p.value > 0).forEach(p => {\n                            const agent = p.dataset_name;\n                            const quantity = p.value;\n                            \n                            // More robust lookup for the UOM\n                            const uom = (uom_lookup[p.label] && uom_lookup[p.label][agent]) ? uom_lookup[p.label][agent] : '';\n\n                            tooltip_html += `<li>\n                                <div class=\"flex justify-between\">\n                                    <div>\n                                        <span class=\"tooltip-legend-color\" style=\"background-color: ${p.color}\"></span>\n                                        <span class=\"tooltip-label\">${agent}</span>\n                                    </div>\n                                    <span class=\"tooltip-value\">${quantity} ${uom}</span>\n                                </div>\n                            </li>`;\n                        });\n\n                        tooltip_html += `</ul>`;\n                        return tooltip_html;\n                    }\n                }\n            });\n        }, 300); // 300ms delay to ensure the container is ready\n    }\n});",
  "view": "Form"
 }
]